{"version":3,"sources":["../components/Form/FormLabel.tsx","../components/Form/FormMessage.tsx","../components/Form/utils/formFieldBase.tsx","../node_modules/lodash/times.js","../node_modules/lodash/find.js","../node_modules/lodash/_createFind.js","../behaviors/Form/formFieldBehavior.tsx","../components/Form/FormInput.tsx","../components/Form/FormDropdown.tsx","../components/Form/FormSlider.tsx","../components/Form/FormCheckbox.tsx","../components/Form/FormButton.tsx","../behaviors/Datepicker/datepickerBehavior.ts","../utils/date-time-utilities/dateFormatting/dateFormatting.defaults.ts","../utils/date-time-utilities/dateFormatting/formatDay.ts","../utils/date-time-utilities/dateFormatting/formatYear.ts","../utils/date-time-utilities/dateFormatting/formatMonthDayYear.ts","../utils/date-time-utilities/dateFormatting/formatMonthYear.ts","../behaviors/Datepicker/datepickerCalendarGridBehavior.ts","../behaviors/Datepicker/datepickerCalendarGridRowBehavior.ts","../behaviors/Datepicker/datepickerCalendarBehavior.ts","../utils/date-time-utilities/dateValues/timeConstants.ts","../utils/date-time-utilities/dateMath/dateMath.ts","../utils/date-time-utilities/dateGrid/isContiguous.ts","../utils/date-time-utilities/dateGrid/getDateRangeTypeToUse.ts","../utils/date-time-utilities/dateGrid/isBeforeMinDate.ts","../utils/date-time-utilities/dateGrid/isAfterMaxDate.ts","../utils/date-time-utilities/dateGrid/isRestrictedDate.ts","../utils/date-time-utilities/dateGrid/getDayGrid.ts","../utils/date-time-utilities/dateGrid/getBoundedDateRange.ts","../components/Datepicker/DatepickerCalendarGrid.tsx","../components/Datepicker/DatepickerCalendarGridRow.tsx","../behaviors/Datepicker/datepickerCalendarHeaderBehavior.ts","../components/ChevronStartIcon.tsx","../components/Datepicker/DatepickerCalendarHeaderAction.tsx","../components/Datepicker/DatepickerCalendarHeader.tsx","../behaviors/Datepicker/datepickerCalendarCellBehavior.ts","../components/Datepicker/DatepickerCalendarCell.tsx","../components/Datepicker/DatepickerCalendarHeaderCell.tsx","../utils/date-time-utilities/dateGrid/findAvailableDate.ts","../components/Datepicker/navigateToNewDate.tsx","../components/Datepicker/DatepickerCalendar.tsx","../components/Datepicker/validateDate.tsx","../../src/string.ts","../components/Datepicker/Datepicker.tsx","../components/Form/FormDatepicker.tsx","../behaviors/TextArea/textAreaBehavior.ts","../components/TextArea/TextArea.tsx","../components/Form/FormTextArea.tsx","../behaviors/Radio/radioGroupBehavior.ts","../components/RadioGroup/RadioGroup.tsx","../components/Form/FormRadioGroup.tsx","../components/Form/FormField.tsx","../components/Form/Form.tsx"],"names":["FormLabel","compose","className","displayName","overrideStyles","mapPropsToStylesProps","inline","required","handledProps","as","commonPropTypes","FormMessage","error","shorthandConfig","mappedProp","_FormFieldBase","context","useFluentContext","useTelemetry","composeOptions","setStart","setEnd","message","props","errorMessage","control","label","design","styles","variables","slotProps","ElementType","getElementType","unhandledProps","useUnhandledProps","messageId","React","getOrGenerateIdFromShorthand","labelId","classes","useStyles","mapPropsToInlineStyles","rtl","unstable_props","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","hasErrorMessage","current","childProps","element","root","createShorthand","defaultProps","id","value","ref","slots","Box","children","PropTypes","customPropTypes","accessibility","formFieldBehavior","baseTimes","require","castFunction","toInteger","MAX_ARRAY_LENGTH","nativeMin","Math","min","module","exports","n","iteratee","index","length","result","find","createFind","baseIteratee","isArrayLike","keys","findIndexFunc","collection","predicate","fromIndex","iterable","Object","key","undefined","attributes","role","FormInput","Input","labelPosition","content","FormDropdown","Dropdown","FormSlider","Slider","FormCheckbox","Checkbox","FormButton","Button","datepickerBehavior","input","keyActions","open","keyCombinations","keyCode","keyboardKey","Enter","DEFAULT_DATE_FORMATTING","formatDay","date","formatYear","formatMonthDayYear","strings","formatMonthYear","parseDate","Date","months","shortMonths","days","shortDays","DEFAULT_CALENDAR_STRINGS","goToToday","openCalendarTitle","inputPlaceholder","weekNumberFormatString","prevMonthAriaLabel","nextMonthAriaLabel","prevYearAriaLabel","nextYearAriaLabel","prevYearRangeAriaLabel","nextYearRangeAriaLabel","closeButtonAriaLabel","selectedDateFormatString","todayDateFormatString","monthPickerHeaderAriaLabel","yearPickerHeaderAriaLabel","isRequiredErrorMessage","invalidInputErrorMessage","isOutOfBoundsErrorMessage","inputAriaLabel","inputBoundedFormatString","inputMinBoundedFormatString","inputMaxBoundedFormatString","datepickerCalendarGridBehavior","focusZone","direction","FocusZoneDirection","pagingSupportDisabled","datepickerCalendarGridRowBehavior","datepickerCalendarBehavior","childBehaviors","calendarGrid","calendarGridRow","calendarCell","addWeek","ArrowDown","subtractWeek","ArrowUp","addDay","ArrowRight","subtractDay","ArrowLeft","moveToStartOfWeek","ctrlKey","moveToEndOfWeek","moveToStartOfColumn","PageUp","moveToEndOfColumn","PageDown","TimeConstants","addDays","addMonths","newMonth","compareDates","date1","date2","compareDatePart","getDatePartHashValue","isInDateRangeArray","getStartDateOfWeek","daysOffset","firstDayOfWeek","getDatePart","getDateRangeTypeToUse","workWeekDays","dateRangeType","DateRangeType","daySet","Set","amountOfNoNeighbors","nextDay","isSingleWeek","isContiguous","isBeforeMinDate","minDate","options","isAfterMaxDate","maxDate","isRestrictedDate","restrictedDates","rd","inRestrictedDates","getDayGrid","selectedDate","today","weeksToShow","daysToSelectInDayView","markedDays","restrictedDateOptions","todaysDate","navigatedDate","weeks","isAllDaysOfWeekOutOfMonth","selectedDateRangeType","selectedDates","datesArray","endDate","DayOfWeek","startDate","Error","nextDate","getDateRangeArray","dateRange","boundedDateRange","getBoundedDateRange","shouldGetWeeks","weekIndex","week","originalDate","dayInfo","isInMonth","isToday","isSelected","isInBounds","isMarked","markedDay","dayIndex","DatepickerCalendarGrid","DatepickerCalendarGridRow","isRowSelectionActive","datepickerCalendarHeaderBehavior","ChevronStartIcon","createSvgIcon","svg","focusable","viewBox","svgFlippingInRtl","cx","iconClassNames","d","DatepickerCalendarHeaderAction","p","iconOnly","text","disabled","disabledNavigatableButton","icon","size","DatepickerCalendarHeader","nextButton","previousButton","onPreviousClick","onNextClick","actionHandlers","Text","title","disabledPreviousButton","overrideProps","onClick","e","disabledNextButton","createShorthandFactory","Component","datepickerCalendarCellBehavior","DatepickerCalendarCell","selected","quiet","mapPropsToStyles","DatepickerCalendarHeaderCell","findAvailableDate","targetDate","initialDate","availableDate","contstraintNavigatedDate","findAvailableDateOptions","navigateToDisabledDates","newNavigatedDate","restrictedDatesOptions","navigateToNewDate","targetDayDirection","step","normalizeDateInGrid","DatepickerCalendar","calendarHeaderCell","calendarCellButton","header","updateNavigatedDate","setShouldFocusInDayGrid","setGridNavigatedDate","gridNavigatedDate","getEndDateOfWeek","targetDayOfWeek","visibleGrid","day","normalizedGridDate","setNormalizedGridDate","shouldFocusInDayGrid","dayGridOptions","firstWeekOfYear","showWeekNumbers","grid","newNormalizedDate","dateFormatting","focusDateRef","changeMonth","nextMonth","prevMonthOutOfBounds","nextMonthOutOfBounds","getMonthEnd","focus","renderWeekRow","renderCell","DatepickerCalendarCellButton","onFocus","selectedDateRange","renderCellButton","dayNumber","onDateChange","name","FirstWeekOfYear","validateDate","futureSelectedDate","isNaN","futureFormattedDate","FORMAT_ARGS_REGEX","FORMAT_REGEX","format","s","args","values","replaceFunc","match","replacement","replace","Datepicker","inputRef","calendar","popup","allowManualInput","ariaLabelledby","ariaInvalid","valueFormatter","useAutoControlled","defaultValue","initialValue","openState","setOpenState","setSelectedDate","formattedDate","setFormattedDate","setError","calendarOptions","calendarElement","predefinedProps","targetDay","itemProps","triggerButtonElement","type","placeholder","readOnly","restrictedOptions","localizationStrings","formattedString","onChange","parsedDate","target","validationError","onBlur","handleRef","Popup","trapFocus","disableFirstFocus","position","align","trigger","onOpenChange","onDateChangeError","fallbackToLastCorrectDateOnBlur","defaultCalendarOpenState","calendarOpenState","defaultSelectedDate","inputOnly","buttonOnly","FormDatepicker","textAreaBehavior","TextArea","inverted","resize","fluid","setValue","newValue","FormTextArea","radioGroupBehavior","nextItem","prevItem","RadioGroup","vertical","items","event","setCheckedItem","checkedValue","setCheckedValue","shouldFocus","setShouldFocus","getItemProps","item","findNextEnabledCheckedItem","checkedValueChange","nextCheckedValue","currentIndex","newIndex","handleItemOverrides","checked","rtlTextContainer","forElements","childrenExist","isNoneValueSelected","RadioGroupItem","tabIndex","renderItems","defaultCheckedValue","onCheckedValueChange","FormRadioGroup","FormField","resolvedStyles","labelElement","htmlFor","messageElement","controlElement","shouldControlAppearFirst","Form","action","onSubmit","fields","field","renderFields"],"mappings":"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","file":"static/js/4.a8a95b80.chunk.js","sourcesContent":["import { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { Box, BoxProps } from '../Box/Box';\n\ninterface FormLabelOwnProps {\n  inline?: boolean;\n  required?: boolean;\n}\n\nexport interface FormLabelProps extends BoxProps, FormLabelOwnProps {}\nexport type FormLabelStylesProps = Required<Pick<FormLabelOwnProps, 'inline' | 'required'>>;\n\nexport const formLabelClassName = 'ui-form__label';\n\n/**\n * An FormLabel provides a slot for label in the FormField.\n */\nexport const FormLabel = compose<'label', FormLabelProps, FormLabelStylesProps, BoxProps, {}>(Box, {\n  className: formLabelClassName,\n  displayName: 'FormLabel',\n  overrideStyles: true,\n  mapPropsToStylesProps: ({ inline, required }) => ({\n    inline,\n    required,\n  }),\n  handledProps: ['required', 'inline'],\n});\n\nFormLabel.defaultProps = {\n  as: 'label',\n};\n\nFormLabel.propTypes = commonPropTypes.createCommon();\n","import { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { Box, BoxProps } from '../Box/Box';\n\ninterface FormMessageOwnProps {\n  error?: boolean;\n}\n\nexport interface FormMessageProps extends BoxProps, FormMessageOwnProps {}\n\nexport type FormMessageStylesProps = Required<Pick<FormMessageOwnProps, 'error'>>;\n\nexport const formMessageClassName = 'ui-form__message';\n\n/**\n * An FormMessage provides a slot for message in the FormField.\n */\nexport const FormMessage = compose<'span', FormMessageProps, FormMessageStylesProps, BoxProps, {}>(Box, {\n  className: formMessageClassName,\n  displayName: 'FormMessage',\n\n  mapPropsToStylesProps: ({ error }) => ({ error }),\n  handledProps: ['error'],\n\n  overrideStyles: true,\n  shorthandConfig: {\n    mappedProp: 'content',\n  },\n});\n\nFormMessage.defaultProps = {\n  as: 'span',\n};\nFormMessage.propTypes = commonPropTypes.createCommon();\n","import { Accessibility, FormFieldBehaviorProps, formFieldBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { UIComponentProps, commonPropTypes, getOrGenerateIdFromShorthand, createShorthand } from '../../../utils';\nimport { ShorthandValue } from '../../../types';\nimport { Box, BoxProps } from '../../Box/Box';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useTelemetry,\n  useAccessibility,\n  useFluentContext,\n  compose,\n  useStyles,\n} from '@fluentui/react-bindings';\nimport { FormLabel, FormLabelProps } from '../FormLabel';\nimport { FormMessage, FormMessageProps } from '../FormMessage';\nimport { FormFieldBaseValue, FormFieldBaseProvider } from './formFieldBaseContext';\n\nexport interface FormFieldBaseProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<FormFieldBehaviorProps>;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** A control for the form field. */\n  control?: ShorthandValue<BoxProps>;\n\n  /** A label for the form field. */\n  label?: ShorthandValue<FormLabelProps>;\n\n  /** Text message that will be displayed below the control (can be used for error, warning, success messages). */\n  message?: ShorthandValue<FormMessageProps>;\n\n  /** Message to be shown when input has error */\n  errorMessage?: ShorthandValue<FormMessageProps>;\n}\n\nexport const formFieldBaseClassName = 'ui-form__field__base';\nexport type FormFieldBaseStylesProps = never;\n\n/**\n * A FormFiedBase represents a Form element containing a label and an input.\n */\nexport const _FormFieldBase = compose<'div', FormFieldBaseProps, {}, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { message, inline, errorMessage, control, label, className, design, styles, variables } = props;\n\n    const slotProps = composeOptions.resolveSlotProps<FormFieldBaseProps>(props);\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const messageId = React.useRef<string>();\n    messageId.current = getOrGenerateIdFromShorthand('error-message-', errorMessage || message, messageId.current);\n    const labelId = React.useRef<string>();\n    labelId.current = getOrGenerateIdFromShorthand('form-label-', label, labelId.current);\n\n    const { classes } = useStyles<FormFieldBaseStylesProps>(_FormFieldBase.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const getA11yProps = useAccessibility<FormFieldBehaviorProps>(props.accessibility, {\n      debugName: composeOptions.displayName,\n      mapPropsToBehavior: () => ({\n        hasErrorMessage: !!errorMessage,\n        messageId: messageId.current,\n        labelId: labelId.current,\n      }),\n      rtl: context.rtl,\n    });\n\n    const childProps: FormFieldBaseValue = React.useMemo(\n      () => ({\n        labelId: labelId.current,\n      }),\n      // TODO: create hooks for id to avoid disbaling esling for accessing the value of refs\n      // eslint-disable-next-line\n      [labelId.current],\n    );\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n        })}\n      >\n        {createShorthand(composeOptions.slots.label, label, {\n          defaultProps: () =>\n            getA11yProps('label', {\n              id: labelId.current,\n              inline,\n              ...slotProps.label,\n            }),\n        })}\n        {/**\n         * When there's a message for the input the labelId and messageId should be consistent in the\n         * aria-labelledby attribute (aria-labelledby=\"labelID messageID\") therefore we need to pass it down\n         * for components like input that are generating its own label internally\n         */}\n        <FormFieldBaseProvider value={childProps}>\n          {createShorthand(composeOptions.slots.control, control || {}, {\n            defaultProps: () =>\n              getA11yProps('control', {\n                error: !!errorMessage || null,\n                ref,\n                ...unhandledProps,\n                ...slotProps.control,\n              }),\n          })}\n        </FormFieldBaseProvider>\n        {createShorthand(composeOptions.slots.message, errorMessage || message, {\n          defaultProps: () =>\n            getA11yProps('message', {\n              id: messageId.current,\n              ...slotProps.message,\n            }),\n        })}\n      </ElementType>\n    );\n    setEnd();\n    return element;\n  },\n  {\n    className: formFieldBaseClassName,\n    displayName: 'FormFieldBase',\n    slots: {\n      label: FormLabel,\n      message: FormMessage,\n      control: Box,\n    },\n    handledProps: [\n      'as',\n      'accessibility',\n      'className',\n      'variables',\n      'design',\n      'styles',\n      'inline',\n      'errorMessage',\n      'message',\n    ],\n    shorthandConfig: {\n      mappedProp: 'control',\n    },\n  },\n);\n\n_FormFieldBase.propTypes = {\n  ...commonPropTypes.createCommon({ children: false }),\n  inline: PropTypes.bool,\n  message: customPropTypes.itemShorthand,\n  errorMessage: customPropTypes.itemShorthand,\n};\n\n_FormFieldBase.defaultProps = {\n  accessibility: formFieldBehavior,\n};\n","var baseTimes = require('./_baseTimes'),\n    castFunction = require('./_castFunction'),\n    toInteger = require('./toInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument; (index).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.times(3, String);\n * // => ['0', '1', '2']\n *\n *  _.times(4, _.constant(0));\n * // => [0, 0, 0, 0]\n */\nfunction times(n, iteratee) {\n  n = toInteger(n);\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n\n  var result = baseTimes(length, iteratee);\n  while (++index < n) {\n    iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = times;\n","var createFind = require('./_createFind'),\n    findIndex = require('./findIndex');\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nmodule.exports = find;\n","var baseIteratee = require('./_baseIteratee'),\n    isArrayLike = require('./isArrayLike'),\n    keys = require('./keys');\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nmodule.exports = createFind;\n","import { Accessibility, AccessibilityDefinition } from '../../types';\n\n/**\n * @specification\n */\nexport const formFieldBehavior: Accessibility<FormFieldBehaviorProps> = props => {\n  const definition: AccessibilityDefinition = {\n    attributes: {\n      root: {},\n      control: {\n        ...(props.hasErrorMessage && { 'aria-invalid': true }),\n        'aria-labelledby': `${props.labelId}`,\n        ...(props.messageId && { 'aria-labelledby': `${props.labelId} ${props.messageId}` }),\n      },\n      message: {\n        ...(props.hasErrorMessage && { role: 'alert' }),\n      },\n    },\n  };\n\n  return definition;\n};\n\nexport type FormFieldBehaviorProps = {\n  /** Field has error message */\n  hasErrorMessage?: boolean;\n\n  /** Field message have a id */\n  messageId?: string;\n\n  labelId?: string;\n};\n","import { compose } from '@fluentui/react-bindings';\nimport { Input, InputProps } from '../Input/Input';\nimport { _FormFieldBase, FormFieldBaseProps } from './utils/formFieldBase';\nimport { commonPropTypes } from '../../utils';\n\ninterface FormInputOwnProps extends Omit<InputProps, 'accessibility'> {}\ntype SelectedFormFieldCustomProps = Omit<\n  FormFieldBaseProps,\n  'control' | 'styles' | 'accessibility' | 'design' | 'variables' | 'label'\n>;\nexport interface FormInputProps extends SelectedFormFieldCustomProps, FormInputOwnProps {}\nexport type FormInputStylesProps = never;\n\nexport const formInputClassName = 'ui-form__input';\n\n/**\n * An FormInput renders a Input wrapped by FormField.\n */\nexport const FormInput = compose<'input', FormInputProps, FormInputStylesProps, SelectedFormFieldCustomProps, {}>(\n  _FormFieldBase,\n  {\n    className: formInputClassName,\n    displayName: 'FormInput',\n    handledProps: ['label', 'labelPosition', 'required'],\n    overrideStyles: true,\n    slots: {\n      control: Input,\n    },\n    slotProps: ({ errorMessage, required, labelPosition }) => ({\n      label: {\n        required,\n      },\n      control: {\n        error: !!errorMessage,\n        labelPosition,\n        required,\n      },\n      message: {\n        error: !!errorMessage,\n      },\n    }),\n  },\n);\n\nFormInput.propTypes = commonPropTypes.createCommon({\n  children: false,\n  content: false,\n});\n","import { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { Dropdown, DropdownProps } from '../Dropdown/Dropdown';\nimport { _FormFieldBase, FormFieldBaseProps } from './utils/formFieldBase';\n\ninterface FormDropdownOwnProps extends DropdownProps {}\ntype SelectedFormFieldCustomProps = Omit<\n  FormFieldBaseProps,\n  'control' | 'styles' | 'accessibility' | 'design' | 'variables'\n>;\nexport interface FormDropdownProps extends SelectedFormFieldCustomProps, FormDropdownOwnProps {}\nexport type FormDropdownStylesProps = never;\n\nexport const formDropdownClassName = 'ui-form__dropdown';\n\n/**\n * An FormDropdown renders a Dropdown wrapped by FormField.\n */\nexport const FormDropdown = compose<'div', DropdownProps, FormDropdownStylesProps, SelectedFormFieldCustomProps, {}>(\n  _FormFieldBase,\n  {\n    className: formDropdownClassName,\n    displayName: 'FormDropdown',\n    overrideStyles: true,\n    slots: {\n      control: Dropdown,\n    },\n    slotProps: ({ errorMessage, inline }) => ({\n      control: {\n        inline,\n      },\n      message: {\n        error: !!errorMessage,\n      },\n    }),\n  },\n);\n\nFormDropdown.propTypes = commonPropTypes.createCommon({\n  accessibility: false,\n  children: false,\n  content: false,\n});\n","import { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { _FormFieldBase, FormFieldBaseProps } from './utils/formFieldBase';\nimport { Slider, SliderProps } from '../Slider/Slider';\n\ninterface FormSliderOwnProps extends Omit<SliderProps, 'accessibility'> {}\ntype SelectedFormFieldCustomProps = Omit<\n  FormFieldBaseProps,\n  'control' | 'styles' | 'accessibility' | 'design' | 'variables'\n>;\nexport interface FormSliderProps extends SelectedFormFieldCustomProps, FormSliderOwnProps {}\nexport type FormSliderStylesProps = never;\nexport const formSliderClassName = 'ui-form__slider';\n\n/**\n * An FormSlider renders a Slider wrapped by FormField.\n */\nexport const FormSlider = compose<'div', FormSliderProps, FormSliderStylesProps, SelectedFormFieldCustomProps, {}>(\n  _FormFieldBase,\n  {\n    className: formSliderClassName,\n    displayName: 'FormSlider',\n    overrideStyles: true,\n    slots: {\n      control: Slider,\n    },\n    slotProps: ({ errorMessage }) => ({\n      message: {\n        error: !!errorMessage,\n      },\n    }),\n  },\n);\n\nFormSlider.propTypes = commonPropTypes.createCommon({\n  children: false,\n  content: false,\n});\n","import { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { Checkbox, CheckboxProps } from '../Checkbox/Checkbox';\nimport { _FormFieldBase, FormFieldBaseProps } from './utils/formFieldBase';\n\ninterface FormCheckboxOwnProps extends Omit<CheckboxProps, 'accessibility'> {}\ntype SelectedFormFieldCustomProps = Omit<\n  FormFieldBaseProps,\n  'control' | 'styles' | 'accessibility' | 'design' | 'variables' | 'label'\n>;\nexport interface FormCheckboxProps extends SelectedFormFieldCustomProps, FormCheckboxOwnProps {}\nexport type FormCheckboxStylesProps = never;\n\nexport const formCheckboxClassName = 'ui-form__checkbox';\n\n/**\n * An FormCheckbox renders a Checkbox wrapped by FormField.\n */\nexport const FormCheckbox = compose<\n  'div',\n  FormCheckboxProps,\n  FormCheckboxStylesProps,\n  SelectedFormFieldCustomProps,\n  {}\n>(_FormFieldBase, {\n  className: formCheckboxClassName,\n  displayName: 'FormCheckbox',\n  overrideStyles: true,\n  handledProps: ['label'],\n  slots: {\n    label: () => null,\n    control: Checkbox,\n  },\n  slotProps: ({ label, errorMessage }) => ({\n    control: {\n      label,\n    },\n    message: {\n      error: !!errorMessage,\n    },\n  }),\n});\n\nFormCheckbox.propTypes = commonPropTypes.createCommon({\n  content: false,\n  children: false,\n});\n","import { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { Button, ButtonProps } from '../Button/Button';\nimport { _FormFieldBase, FormFieldBaseProps } from './utils/formFieldBase';\n\ninterface FormButtonOwnProps extends ButtonProps {}\ntype SelectedFormFieldCustomProps = Omit<\n  FormFieldBaseProps,\n  'control' | 'styles' | 'accessibility' | 'design' | 'variables'\n>;\nexport interface FormButtonProps extends SelectedFormFieldCustomProps, FormButtonOwnProps {}\nexport type FormButtonStylesProps = never;\n\nexport const formButtonClassName = 'ui-form__button';\n\n/**\n * An FormButton renders a Button wrapped by FormField.\n */\nexport const FormButton = compose<'button', FormButtonProps, FormButtonStylesProps, SelectedFormFieldCustomProps, {}>(\n  _FormFieldBase,\n  {\n    className: formButtonClassName,\n    displayName: 'FormButton',\n    overrideStyles: true,\n    slots: {\n      control: Button,\n    },\n  },\n);\n\nFormButton.propTypes = commonPropTypes.createCommon({\n  content: false, // Should be `true`, but will be passed via unhandled props to a Button\n  children: false,\n});\n","import { Accessibility, AccessibilityAttributes } from '../../types';\nimport { keyboardKey } from '../../keyboard-key';\n\n/**\n * @description\n * Behavior for a datepicker component\n * @specification\n * Triggers 'open' action with 'Enter' on 'input'.\n * Adds attribute 'aria-labelledby' based on the property 'aria-labelledby' to 'input' slot.\n * Adds attribute 'aria-invalid' based on the property 'aria-invalid' to 'input' slot.\n */\n\nexport const datepickerBehavior: Accessibility<DatepickerBehaviorProps> = props => ({\n  attributes: {\n    input: {\n      'aria-labelledby': props['aria-labelledby'],\n      'aria-invalid': props['aria-invalid'],\n    },\n  },\n  keyActions: {\n    input: {\n      open: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }],\n      },\n    },\n  },\n});\n\nexport type DatepickerBehaviorProps = {\n  'aria-labelledby'?: AccessibilityAttributes['aria-labelledby'];\n  'aria-invalid'?: AccessibilityAttributes['aria-invalid'];\n};\n","import { IDateGridStrings, IDateFormatting, ICalendarStrings } from './dateFormatting.types';\nimport { formatDay } from './formatDay';\nimport { formatYear } from './formatYear';\nimport { formatMonthDayYear } from './formatMonthDayYear';\nimport { formatMonthYear } from './formatMonthYear';\n\nexport const DEFAULT_LOCALIZED_STRINGS: IDateGridStrings = {\n  months: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n};\n\nexport const DEFAULT_DATE_FORMATTING: IDateFormatting = {\n  formatDay,\n  formatYear,\n  formatMonthDayYear,\n  formatMonthYear,\n  parseDate: (dateStr: string) => {\n    const date = Date.parse(dateStr);\n    if (date) {\n      return new Date(date);\n    }\n\n    return null;\n  },\n  ...DEFAULT_LOCALIZED_STRINGS,\n};\n\nexport const DEFAULT_CALENDAR_STRINGS: ICalendarStrings = {\n  ...DEFAULT_DATE_FORMATTING,\n\n  goToToday: 'Go to today',\n  openCalendarTitle: 'Open calendar',\n  inputPlaceholder: 'Select a date...',\n  weekNumberFormatString: 'Week number {0}',\n  prevMonthAriaLabel: 'Previous month',\n  nextMonthAriaLabel: 'Next month',\n  prevYearAriaLabel: 'Previous year',\n  nextYearAriaLabel: 'Next year',\n  prevYearRangeAriaLabel: 'Previous year range',\n  nextYearRangeAriaLabel: 'Next year range',\n  closeButtonAriaLabel: 'Close',\n  selectedDateFormatString: 'Selected date {0}',\n  todayDateFormatString: \"Today's date {0}\",\n  monthPickerHeaderAriaLabel: '{0}, select to change the year',\n  yearPickerHeaderAriaLabel: '{0}, select to change the month',\n  isRequiredErrorMessage: 'A date selection is required',\n  invalidInputErrorMessage: 'Manually entered date is not in correct format.',\n  isOutOfBoundsErrorMessage: 'The selected date is from the restricted range.',\n  inputAriaLabel: 'Select a date.',\n  inputBoundedFormatString: 'Input a date between {0} and {1}.',\n  inputMinBoundedFormatString: 'Input a date starting from {0}.',\n  inputMaxBoundedFormatString: 'Input a date ending at {0}.',\n};\n","/**\n * Format date to a day string representation\n * @param date - input date to format\n */\nexport const formatDay = (date: Date) => date.getDate().toString();\n","/**\n * Format date to a year string representation\n * @param date - input date to format\n */\nexport const formatYear = (date: Date) => date.getFullYear().toString();\n","import { IDateGridStrings } from './dateFormatting.types';\n\n/**\n * Format date to a month-day-year string\n * @param date - input date to format\n * @param strings - localized strings\n */\nexport const formatMonthDayYear = (date: Date, strings: IDateGridStrings) =>\n  `${strings.months[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n","import { IDateGridStrings } from './dateFormatting.types';\n\n/**\n * Format date to a month-year string\n * @param date - input date to format\n * @param strings - localized strings\n */\nexport const formatMonthYear = (date: Date, strings: IDateGridStrings) =>\n  `${strings.months[date.getMonth()]} ${date.getFullYear()}`;\n","import { Accessibility } from '../../types';\nimport { FocusZoneDirection } from '../../focusZone/types';\n/**\n * @description\n * Behavior for a datepicker calendar grid.\n * @specification\n * Provides arrow key navigation in bidirectional direction.\n * Adds role='grid'.\n */\nexport const datepickerCalendarGridBehavior: Accessibility<DatepickerCalendarGridBehaviorProps> = () => ({\n  attributes: {\n    root: {\n      role: 'grid',\n    },\n  },\n  focusZone: {\n    props: {\n      direction: FocusZoneDirection.bidirectional,\n      pagingSupportDisabled: true,\n    },\n  },\n});\n\nexport type DatepickerCalendarGridBehaviorProps = never;\n","import { Accessibility } from '../../types';\n/**\n * @description\n * Behavior for a datepicker calendar grid row.\n * @specification\n * Adds role 'row' to 'root' slot.\n */\nexport const datepickerCalendarGridRowBehavior: Accessibility<DatepickerCalendarGridRowBehaviorProps> = () => ({\n  attributes: {\n    root: {\n      role: 'row',\n    },\n  },\n});\n\nexport type DatepickerCalendarGridRowBehaviorProps = never;\n","import { Accessibility } from '../../types';\nimport { datepickerCalendarGridBehavior } from './datepickerCalendarGridBehavior';\nimport { datepickerCalendarGridRowBehavior } from './datepickerCalendarGridRowBehavior';\nimport { keyboardKey } from '../../keyboard-key';\n/**\n * @description\n * Behavior for a datepicked calendar component\n * @specification\n * Applies 'datepickerCalendarGridBehavior' for 'calendarGrid' child component.\n */\nexport const datepickerCalendarBehavior: Accessibility<DatepickerCalendarBehaviorProps> = () => ({\n  childBehaviors: {\n    calendarGrid: datepickerCalendarGridBehavior,\n    calendarGridRow: datepickerCalendarGridRowBehavior,\n  },\n  keyActions: {\n    calendarCell: {\n      addWeek: {\n        keyCombinations: [{ keyCode: keyboardKey.ArrowDown }],\n      },\n      subtractWeek: {\n        keyCombinations: [{ keyCode: keyboardKey.ArrowUp }],\n      },\n      addDay: {\n        keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n      },\n      subtractDay: {\n        keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n      },\n      moveToStartOfWeek: {\n        keyCombinations: [{ keyCode: keyboardKey.Home, ctrlKey: false }],\n      },\n      moveToEndOfWeek: {\n        keyCombinations: [{ keyCode: keyboardKey.End, ctrlKey: false }],\n      },\n      moveToStartOfColumn: {\n        keyCombinations: [{ keyCode: keyboardKey.PageUp }],\n      },\n      moveToEndOfColumn: {\n        keyCombinations: [{ keyCode: keyboardKey.PageDown }],\n      },\n    },\n  },\n});\n\nexport type DatepickerCalendarBehaviorProps = never;\n","/**\n * Common constants and methods\n */\nexport const TimeConstants = {\n  MillisecondsInOneDay: 86400000,\n  MillisecondsIn1Sec: 1000,\n  MillisecondsIn1Min: 60000,\n  MillisecondsIn30Mins: 1800000,\n  MillisecondsIn1Hour: 3600000,\n  MinutesInOneDay: 1440,\n  MinutesInOneHour: 60,\n  DaysInOneWeek: 7,\n  MonthInOneYear: 12,\n};\n","import { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/dateValues';\nimport { TimeConstants } from '../dateValues/timeConstants';\n\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */\nexport function addDays(date: Date, days: number): Date {\n  const result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */\nexport function addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */\nexport function addMonths(date: Date, months: number): Date {\n  let result = new Date(date.getTime());\n  const newMonth = result.getMonth() + months;\n  result.setMonth(newMonth);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((newMonth % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */\nexport function addYears(date: Date, years: number): Date {\n  let result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((date.getMonth() % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */\nexport function getMonthStart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */\nexport function getMonthEnd(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */\nexport function getYearStart(date: Date): Date {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */\nexport function getYearEnd(date: Date): Date {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */\nexport function setMonth(date: Date, month: number): Date {\n  return addMonths(date, month - date.getMonth());\n}\n\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\nexport function compareDates(date1: Date, date2: Date): boolean {\n  if (!date1 && !date2) {\n    return true;\n  }\n  if (!date1 || !date2) {\n    return false;\n  }\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  );\n}\n\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\nexport function compareDatePart(date1: Date, date2: Date): Number {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */\nexport function getDateRangeArray(\n  date: Date,\n  dateRangeType: DateRangeType,\n  firstDayOfWeek: DayOfWeek,\n  workWeekDays?: DayOfWeek[],\n  daysToSelectInDayView: number = 1,\n): Date[] {\n  const datesArray: Date[] = [];\n  let startDate: Date;\n  let endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, daysToSelectInDayView);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      throw new Error(`Unexpected object: ${dateRangeType}`);\n  }\n\n  // Populate the dates array with the dates in range\n  let nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */\nexport function isInDateRangeArray(date: Date, dateRange: Date[]): boolean {\n  for (const dateInRange of dateRange) {\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */\nexport function getWeekNumbersInMonth(\n  weeksInMonth: number,\n  firstDayOfWeek: DayOfWeek,\n  firstWeekOfYear: FirstWeekOfYear,\n  navigatedDate: Date,\n): number[] {\n  const selectedYear = navigatedDate.getFullYear();\n  const selectedMonth = navigatedDate.getMonth();\n  let dayOfMonth = 1;\n  const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  const endOfFirstWeek =\n    dayOfMonth +\n    (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) -\n    adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n\n  const weeksArray = [];\n  for (let i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n  return weeksArray;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */\nexport function getWeekNumber(date: Date, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear): number {\n  // First four-day week of the year - minumum days count\n  const fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  let daysOffset = firstDayOfWeek - date.getDay();\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getEndDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  const lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n  let daysOffset = lastDayOfWeek - date.getDay();\n  if (daysOffset < 0) {\n    // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n    daysOffset += TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */\nfunction getDatePart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n/**\n * Helper function to assist in date comparisons\n */\nexport function getDatePartHashValue(date: Date): number {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */\nfunction getWeekOfYearFullDays(date: Date, firstDayOfWeek: DayOfWeek, numberOfFullDays: number): number {\n  const dayOfYear = getDayOfYear(date) - 1;\n  let num = date.getDay() - (dayOfYear % TimeConstants.DaysInOneWeek);\n\n  const lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n\n  let num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  let num3 = dayOfYear - num2;\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */\nfunction getFirstDayWeekOfYear(date: Date, firstDayOfWeek: number): number {\n  const num = getDayOfYear(date) - 1;\n  const num2 = date.getDay() - (num % TimeConstants.DaysInOneWeek);\n  const num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns adjusted week day number when firstDayOfWeek is other than Sunday\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */\nfunction adjustWeekDay(firstDayOfWeek: DayOfWeek, dateWeekDay: DayOfWeek): number {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek\n    ? dateWeekDay + TimeConstants.DaysInOneWeek\n    : dateWeekDay;\n}\n\n/**\n * Returns the day number for a date in a year\n * The number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */\nfunction getDayOfYear(date: Date): number {\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  let daysUntilDate = 0;\n\n  for (let i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n\n  return daysUntilDate;\n}\n\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */\nfunction daysInMonth(month: number, year: number): number {\n  return new Date(year, month, 0).getDate();\n}\n","import { DayOfWeek } from '../dateValues/dateValues';\n\n/**\n * Returns whether provided week days are contiguous.\n * @param days - list of days in a week\n * @param isSingleWeek - decides whether the contiguous logic applies across week boundaries or not\n * @param firstDayOfWeek - decides which day of week is the first one in the order.\n */\nexport const isContiguous = (days: DayOfWeek[], isSingleWeek: boolean, firstDayOfWeek: DayOfWeek): boolean => {\n  const daySet = new Set(days);\n  let amountOfNoNeighbors = 0;\n  for (const day of days) {\n    const nextDay = (day + 1) % 7;\n    if (!(daySet.has(nextDay) && (!isSingleWeek || firstDayOfWeek !== nextDay))) {\n      amountOfNoNeighbors++;\n    }\n  }\n\n  // In case the full week is provided, then each day has a neighbor\n  // , otherwise the last day does not have a neighbor.\n  return amountOfNoNeighbors < 2;\n};\n","import { DateRangeType, DayOfWeek } from '../dateValues/dateValues';\nimport { isContiguous } from './isContiguous';\n/**\n * Return corrected date range type, given `dateRangeType` and list of working days.\n * For non-contiguous working days and working week range type, returns general week range type.\n * For other cases returns input date range type.\n * @param dateRangeType - input type of range\n * @param workWeekDays - list of working days in a week\n */\nexport const getDateRangeTypeToUse = (\n  dateRangeType: DateRangeType,\n  workWeekDays: DayOfWeek[] | undefined,\n  firstDayOfWeek: DayOfWeek,\n): DateRangeType => {\n  if (workWeekDays && dateRangeType === DateRangeType.WorkWeek) {\n    if (!isContiguous(workWeekDays, true, firstDayOfWeek) || workWeekDays.length === 0) {\n      return DateRangeType.Week;\n    }\n  }\n\n  return dateRangeType;\n};\n","import { IRestrictedDatesOptions } from './dateGrid.types';\nimport { compareDatePart } from '../dateMath/dateMath';\n\n/**\n * Checks if `date` happens earlier than min date\n * @param date - date to check\n * @param options - object with min date to check against\n */\nexport const isBeforeMinDate = (date: Date, options: IRestrictedDatesOptions): boolean => {\n  const { minDate } = options;\n  return minDate ? compareDatePart(minDate, date) >= 1 : false;\n};\n","import { IRestrictedDatesOptions } from './dateGrid.types';\nimport { compareDatePart } from '../dateMath/dateMath';\n\n/**\n * Checks if `date` happens later than max date\n * @param date - date to check\n * @param options - object with max date to check against\n */\nexport const isAfterMaxDate = (date: Date, options: IRestrictedDatesOptions): boolean => {\n  const { maxDate } = options;\n  return maxDate ? compareDatePart(date, maxDate) >= 1 : false;\n};\n","import { IRestrictedDatesOptions } from './dateGrid.types';\nimport { compareDates } from '../dateMath/dateMath';\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { isAfterMaxDate } from './isAfterMaxDate';\n\n/**\n * Checks if `date` falls into the restricted `options`\n * @param date - date to check\n * @param options - restriction options (min date, max date and list of restricted dates)\n */\nexport const isRestrictedDate = (date: Date, options: IRestrictedDatesOptions): boolean => {\n  const { restrictedDates, minDate, maxDate } = options;\n  if (!restrictedDates && !minDate && !maxDate) {\n    return false;\n  }\n  const inRestrictedDates = restrictedDates && restrictedDates.some((rd: Date) => compareDates(rd, date));\n  return inRestrictedDates || isBeforeMinDate(date, options) || isAfterMaxDate(date, options);\n};\n","import { addDays, compareDates, getDateRangeArray, isInDateRangeArray } from '../dateMath/dateMath';\nimport { DAYS_IN_WEEK } from '../dateValues/dateValues';\nimport { IDay, IDayGridOptions } from './dateGrid.types';\nimport { getDateRangeTypeToUse } from './getDateRangeTypeToUse';\nimport { getBoundedDateRange } from './getBoundedDateRange';\nimport { isRestrictedDate } from './isRestrictedDate';\n\n/**\n * Generates a grid of days, given the `options`.\n * Returns one additional week at the begining from the previous range\n * and one at the end from the future range\n * @param options - parameters to specify date related restrictions for the resulting grid\n */\nexport const getDayGrid = (options: IDayGridOptions): IDay[][] => {\n  const {\n    selectedDate,\n    dateRangeType,\n    firstDayOfWeek,\n    today,\n    minDate,\n    maxDate,\n    weeksToShow,\n    workWeekDays,\n    daysToSelectInDayView,\n    restrictedDates,\n    markedDays,\n  } = options;\n  const restrictedDateOptions = { minDate, maxDate, restrictedDates };\n\n  const todaysDate = today || new Date();\n\n  const navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;\n\n  let date;\n  if (weeksToShow && weeksToShow <= 4) {\n    // if showing less than a full month, just use date == navigatedDate\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());\n  } else {\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n  }\n  const weeks: IDay[][] = [];\n\n  // Cycle the date backwards to get to the first day of the week.\n  while (date.getDay() !== firstDayOfWeek) {\n    date.setDate(date.getDate() - 1);\n  }\n\n  // add the transition week as last week of previous range\n  date = addDays(date, -DAYS_IN_WEEK);\n\n  // a flag to indicate whether all days of the week are outside the month\n  let isAllDaysOfWeekOutOfMonth = false;\n\n  // in work week view if the days aren't contiguous we use week view instead\n  const selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);\n\n  let selectedDates: Date[] = [];\n\n  if (!!selectedDate) {\n    selectedDates = getDateRangeArray(\n      selectedDate,\n      selectedDateRangeType,\n      firstDayOfWeek,\n      workWeekDays,\n      daysToSelectInDayView,\n    );\n    selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);\n  }\n\n  let shouldGetWeeks = true;\n\n  for (let weekIndex = 0; shouldGetWeeks; weekIndex++) {\n    const week: IDay[] = [];\n\n    isAllDaysOfWeekOutOfMonth = true;\n\n    for (let dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n      const originalDate = new Date(date.getTime());\n      const dayInfo: IDay = {\n        key: date.toString(),\n        date: date.getDate().toString(),\n        originalDate,\n        isInMonth: date.getMonth() === navigatedDate.getMonth(),\n        isToday: compareDates(todaysDate, date),\n        isSelected: isInDateRangeArray(date, selectedDates),\n        isInBounds: !isRestrictedDate(date, restrictedDateOptions),\n        isMarked: markedDays?.some(markedDay => compareDates(originalDate, markedDay)) || false,\n      };\n\n      week.push(dayInfo);\n\n      if (dayInfo.isInMonth) {\n        isAllDaysOfWeekOutOfMonth = false;\n      }\n\n      date.setDate(date.getDate() + 1);\n    }\n\n    // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n    shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0;\n\n    // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state\n    weeks.push(week);\n  }\n\n  return weeks;\n};\n","import { compareDatePart } from '../dateMath/dateMath';\n\n/**\n * Generates a list of dates, bounded by min and max dates\n * @param dateRange - input date range\n * @param minDate - min date to limit the range\n * @param maxDate - max date to limit the range\n */\nexport const getBoundedDateRange = (dateRange: Date[], minDate?: Date, maxDate?: Date): Date[] => {\n  let boundedDateRange = [...dateRange];\n  if (minDate) {\n    boundedDateRange = boundedDateRange.filter((date: Date) => compareDatePart(date, minDate as Date) >= 0);\n  }\n  if (maxDate) {\n    boundedDateRange = boundedDateRange.filter((date: Date) => compareDatePart(date, maxDate as Date) <= 0);\n  }\n  return boundedDateRange;\n};\n","import { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { BoxProps, Box } from '../Box/Box';\n\nexport type DatepickerCalendarGridProps = {};\n\nexport type DatepickerCalendarGridStylesProps = {};\n\nexport const datepickerCalendarGridClassName = 'ui-datepicker__calendargrid';\n/**\n * A DatepickerCalendarGrid is used to display the whole calendar grid.\n */\nexport const DatepickerCalendarGrid = compose<\n  'table',\n  DatepickerCalendarGridProps,\n  DatepickerCalendarGridStylesProps,\n  BoxProps,\n  {}\n>(Box, {\n  className: datepickerCalendarGridClassName,\n  displayName: 'DatepickerCalendarGrid',\n  overrideStyles: true,\n  shorthandConfig: {\n    mappedProp: 'content',\n  },\n});\n\nDatepickerCalendarGrid.defaultProps = {\n  as: 'table',\n};\n\nDatepickerCalendarGrid.propTypes = commonPropTypes.createCommon();\n","import { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { BoxProps, Box } from '../Box/Box';\n\nexport type DatepickerCalendarGridRowProps = {\n  isRowSelectionActive?: boolean;\n};\n\nexport type DatepickerCalendarGridRowStylesProps = {\n  isRowSelectionActive?: boolean;\n};\n\nexport const datepickerCalendarGridRowClassName = 'ui-datepicker__calendargridrow';\n/**\n * A DatepickerCalendarGridRow is used to display the calendar grid row.\n */\nexport const DatepickerCalendarGridRow = compose<\n  'tr',\n  DatepickerCalendarGridRowProps,\n  DatepickerCalendarGridRowStylesProps,\n  BoxProps,\n  {}\n>(Box, {\n  className: datepickerCalendarGridRowClassName,\n  displayName: 'DatepickerCalendarGridRow',\n  handledProps: ['isRowSelectionActive'],\n  overrideStyles: true,\n  mapPropsToStylesProps: ({ isRowSelectionActive }) => ({\n    isRowSelectionActive,\n  }),\n  shorthandConfig: {\n    mappedProp: 'content',\n  },\n});\n\nDatepickerCalendarGridRow.defaultProps = {\n  as: 'tr',\n};\n\nDatepickerCalendarGridRow.propTypes = commonPropTypes.createCommon();\n","import { Accessibility } from '../../types';\n/**\n * @description\n * Behavior for a datepicked calendar component\n * @specification\n * Adds attribute 'aria-live=polite' to 'label' slot.\n */\nexport const datepickerCalendarHeaderBehavior: Accessibility<DatepickerCalendarHeaderBehaviorProps> = () => ({\n  attributes: {\n    label: {\n      'aria-live': 'polite',\n    },\n  },\n});\n\nexport type DatepickerCalendarHeaderBehaviorProps = never;\n","import * as React from 'react';\nimport cx from 'classnames';\nimport { createSvgIcon } from '../utils/createSvgIcon';\nimport { iconClassNames } from '../utils/iconClassNames';\n\nexport const ChevronStartIcon = createSvgIcon({\n  svg: ({ classes }) => (\n    <svg role=\"presentation\" focusable=\"false\" viewBox=\"2 2 16 16\" className={classes.svgFlippingInRtl}>\n      <g>\n        <path\n          className={cx(iconClassNames.outline, classes.outlinePart)}\n          d=\"M12.3544 15.8529C12.1594 16.0485 11.8429 16.0491 11.6472 15.8542L6.16276 10.3892C5.94705 10.1743 5.94705 9.82495 6.16276 9.61L11.6472 4.14502C11.8429 3.95011 12.1594 3.95067 12.3544 4.14628C12.5493 4.34189 12.5487 4.65848 12.3531 4.85339L7.18851 9.99961L12.3531 15.1458C12.5487 15.3407 12.5493 15.6573 12.3544 15.8529Z\"\n        />\n        <path\n          className={cx(iconClassNames.filled, classes.filledPart)}\n          d=\"M12.2676 15.793C11.9677 16.0787 11.493 16.0672 11.2073 15.7673L6.20597 10.5168C5.93004 10.2271 5.93004 9.7719 6.20597 9.48223L11.2073 4.23177C11.493 3.93184 11.9677 3.92031 12.2676 4.206C12.5676 4.49169 12.5791 4.96642 12.2934 5.26634L7.78483 9.99952L12.2934 14.7327C12.5791 15.0326 12.5676 15.5074 12.2676 15.793Z\"\n        />\n      </g>\n    </svg>\n  ),\n  displayName: 'ChevronStartIcon',\n});\n","import * as React from 'react';\n\nimport { buttonBehavior } from '@fluentui/accessibility';\nimport { compose } from '@fluentui/react-bindings';\nimport { ChevronEndIcon, ChevronStartIcon } from '@fluentui/react-icons-northstar';\nimport { Button, ButtonProps, ButtonStylesProps } from '../Button/Button';\n\nexport type DatepickerCalendarHeaderActionProps = ButtonProps & {\n  /** What direction the action button should be pointing. */\n  direction?: 'previous' | 'next';\n\n  /** Button is disabled for action but still enabled for navigation. */\n  disabledNavigatableButton?: boolean;\n};\n\nexport type DatepickerCalendarHeaderActionStylesProps = ButtonStylesProps;\n\nexport const datepickerCalendarHeaderActionClassName = 'ui-datepicker__calendarheaderaction';\n\n/**\n * A DatepickerCalendarHeaderAction is used to display action button for DatepickerCalendarHeader.\n */\nexport const DatepickerCalendarHeaderAction = compose<\n  'button',\n  DatepickerCalendarHeaderActionProps,\n  DatepickerCalendarHeaderActionStylesProps,\n  ButtonProps,\n  {}\n>(Button, {\n  className: datepickerCalendarHeaderActionClassName,\n  displayName: 'DatepickerCalendarHeaderAction',\n  handledProps: ['direction', 'disabledNavigatableButton'],\n  mapPropsToStylesProps: p => ({\n    iconOnly: true,\n    text: true,\n    disabled: p.disabledNavigatableButton,\n  }),\n  slotProps: props => ({\n    icon: {\n      content: props.direction === 'next' ? <ChevronEndIcon /> : <ChevronStartIcon />,\n    },\n  }),\n});\n\nDatepickerCalendarHeaderAction.defaultProps = {\n  as: 'button',\n  accessibility: buttonBehavior,\n  size: 'medium',\n  icon: {},\n};\n","import * as _ from 'lodash';\nimport * as React from 'react';\n\nimport {\n  Accessibility,\n  datepickerCalendarHeaderBehavior,\n  DatepickerCalendarHeaderBehaviorProps,\n} from '@fluentui/accessibility';\nimport { ICalendarStrings, DEFAULT_CALENDAR_STRINGS } from '../../utils/date-time-utilities';\nimport {\n  ForwardRefWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport { FluentComponentStaticProps, ShorthandValue, ComponentEventHandler } from '../../types';\nimport {\n  commonPropTypes,\n  ContentComponentProps,\n  createShorthand,\n  createShorthandFactory,\n  UIComponentProps,\n} from '../../utils';\nimport { DatepickerCalendarHeaderAction, DatepickerCalendarHeaderActionProps } from './DatepickerCalendarHeaderAction';\nimport { Text, TextProps } from '../Text/Text';\n\nexport interface DatepickerCalendarHeaderProps\n  extends UIComponentProps,\n    ContentComponentProps,\n    Pick<ICalendarStrings, 'prevMonthAriaLabel' | 'nextMonthAriaLabel'> {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<DatepickerCalendarHeaderBehaviorProps>;\n\n  /** Shorthand for text label. */\n  label?: ShorthandValue<TextProps>;\n\n  /** Action to happen on click on the previous button */\n  onPreviousClick?: ComponentEventHandler<DatepickerCalendarHeaderActionProps>;\n\n  /** Action to happen on click on the next button */\n  onNextClick?: ComponentEventHandler<DatepickerCalendarHeaderActionProps>;\n\n  /** Shorthand for the button that navigates to the previous calendar screen. */\n  previousButton?: ShorthandValue<DatepickerCalendarHeaderActionProps>;\n\n  /** Shorthand for the button that navigates to the next calendar screen. */\n  nextButton?: ShorthandValue<DatepickerCalendarHeaderActionProps>;\n\n  /** Decides whether next button is actionable._align_baseline. */\n  disabledNextButton?: boolean;\n\n  /** Decides whether previous button is actionable._align_baseline. */\n  disabledPreviousButton?: boolean;\n}\n\nexport type DatepickerCalendarHeaderStylesProps = never;\n\nexport const datepickerCalendarHeaderClassName = 'ui-datepicker__calendarheader';\n\n/**\n * A DatepickerCalendarHeader is used to display header block above calendar grid.\n */\nexport const DatepickerCalendarHeader = (React.forwardRef<HTMLDivElement, DatepickerCalendarHeaderProps>(\n  (props, ref) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(DatepickerCalendarHeader.displayName, context.telemetry);\n    setStart();\n\n    const {\n      className,\n      design,\n      styles,\n      variables,\n      label,\n      nextButton,\n      previousButton,\n      onPreviousClick,\n      onNextClick,\n    } = props;\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(DatepickerCalendarHeader.handledProps, props);\n    const getA11yProps = useAccessibility(props.accessibility, {\n      debugName: DatepickerCalendarHeader.displayName,\n      actionHandlers: {},\n      rtl: context.rtl,\n    });\n\n    const { classes } = useStyles<DatepickerCalendarHeaderStylesProps>(DatepickerCalendarHeader.displayName, {\n      className: datepickerCalendarHeaderClassName,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n    });\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {createShorthand(Text, label, {\n          defaultProps: () =>\n            getA11yProps('label', {\n              className: classes.label,\n            }),\n        })}\n\n        {createShorthand(DatepickerCalendarHeaderAction, previousButton, {\n          defaultProps: () =>\n            getA11yProps('previousButton', {\n              title: props.prevMonthAriaLabel,\n              direction: 'previous' as const,\n              'aria-disabled': props.disabledPreviousButton,\n              disabledNavigatableButton: props.disabledPreviousButton,\n            }),\n          overrideProps: (\n            predefinedProps: DatepickerCalendarHeaderActionProps,\n          ): DatepickerCalendarHeaderActionProps => ({\n            onClick: (e, data) => {\n              if (!props.disabledPreviousButton) {\n                onPreviousClick(e, data);\n                _.invoke(predefinedProps, 'onClick', e, data);\n              }\n            },\n          }),\n        })}\n        {createShorthand(DatepickerCalendarHeaderAction, nextButton, {\n          defaultProps: () =>\n            getA11yProps('nextButton', {\n              title: props.nextMonthAriaLabel,\n              direction: 'next' as const,\n              'aria-disabled': props.disabledNextButton,\n              disabledNavigatableButton: props.disabledNextButton,\n            }),\n          overrideProps: (\n            predefinedProps: DatepickerCalendarHeaderActionProps,\n          ): DatepickerCalendarHeaderActionProps => ({\n            onClick: (e, data) => {\n              if (!props.disabledNextButton) {\n                onNextClick(e, data);\n                _.invoke(predefinedProps, 'onClick', e, data);\n              }\n            },\n          }),\n        })}\n      </ElementType>\n    );\n    setEnd();\n    return element;\n  },\n) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, DatepickerCalendarHeaderProps> &\n  FluentComponentStaticProps<DatepickerCalendarHeaderProps>;\n\nDatepickerCalendarHeader.displayName = 'DatepickerCalendarHeader';\n\nDatepickerCalendarHeader.propTypes = {\n  ...commonPropTypes.createCommon(),\n  label: customPropTypes.itemShorthand,\n  nextButton: customPropTypes.itemShorthand,\n  previousButton: customPropTypes.itemShorthand,\n  onPreviousClick: PropTypes.func,\n  onNextClick: PropTypes.func,\n  disabledNextButton: PropTypes.bool,\n  disabledPreviousButton: PropTypes.bool,\n\n  prevMonthAriaLabel: PropTypes.string,\n  nextMonthAriaLabel: PropTypes.string,\n};\n\nDatepickerCalendarHeader.defaultProps = {\n  accessibility: datepickerCalendarHeaderBehavior,\n  nextButton: {},\n  previousButton: {},\n  label: {},\n\n  prevMonthAriaLabel: DEFAULT_CALENDAR_STRINGS.prevMonthAriaLabel,\n  nextMonthAriaLabel: DEFAULT_CALENDAR_STRINGS.nextMonthAriaLabel,\n};\n\nDatepickerCalendarHeader.handledProps = Object.keys(DatepickerCalendarHeader.propTypes) as any;\n\nDatepickerCalendarHeader.create = createShorthandFactory({ Component: DatepickerCalendarHeader });\n","import { Accessibility } from '../../types';\n\n/**\n * @description\n * Behavior for a datepicker calendar grid cell.\n * The aria roles need to be explicitly added so that VPC mode is turned off when navigating the grid.\n * Thus the keyboard navigation works properly.\n * @specification\n * Adds role='none'.\n */\nexport const datepickerCalendarCellBehavior: Accessibility<DatepickerCalendarCellBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      role: 'none',\n    },\n  },\n});\n\nexport type DatepickerCalendarCellBehaviorProps = {};\n","import {\n  Accessibility,\n  datepickerCalendarCellBehavior,\n  DatepickerCalendarCellBehaviorProps,\n} from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  useUnhandledProps,\n  compose,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, ContentComponentProps, UIComponentProps } from '../../utils';\n\nexport interface DatepickerCalendarCellProps extends UIComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<DatepickerCalendarCellBehaviorProps>;\n\n  /** A cell can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A cell can show that it is currently selected or not. */\n  selected?: boolean;\n\n  /** Denotes that the cell marks today's date. */\n  today?: boolean;\n\n  /** A cell can show that it currently has dimmed styles. */\n  quiet?: boolean;\n}\n\nexport type DatepickerCalendarCellStylesProps = Pick<\n  DatepickerCalendarCellProps,\n  'disabled' | 'selected' | 'quiet' | 'today'\n>;\n\nexport const datepickerCalendarCellClassName = 'ui-datepicker__calendarcell';\n/**\n * A Datepicker cell is used to display calendar grid cells.\n */\nexport const DatepickerCalendarCell = compose<\n  'td',\n  DatepickerCalendarCellProps,\n  DatepickerCalendarCellStylesProps,\n  {},\n  {}\n>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { className, design, styles, variables, disabled, selected, quiet, today, content } = props;\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const ElementType = getElementType(props);\n    const getA11yProps = useAccessibility(props.accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {},\n      mapPropsToBehavior: () => ({\n        selected,\n        disabled,\n        quiet,\n        today,\n      }),\n      rtl: context.rtl,\n    });\n\n    const { classes } = useStyles<DatepickerCalendarCellStylesProps>(DatepickerCalendarCell.displayName, {\n      className: composeOptions.className,\n      mapPropsToStyles: () => ({\n        disabled,\n        selected,\n        quiet,\n        today,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {content}\n      </ElementType>\n    );\n    setEnd();\n    return element;\n  },\n  {\n    className: datepickerCalendarCellClassName,\n    displayName: 'DatepickerCalendarCell',\n\n    handledProps: [\n      'accessibility',\n      'as',\n      'className',\n      'content',\n      'design',\n      'disabled',\n      'selected',\n      'styles',\n      'variables',\n      'quiet',\n      'today',\n    ],\n  },\n);\n\nDatepickerCalendarCell.propTypes = {\n  ...commonPropTypes.createCommon({ children: false }),\n  disabled: PropTypes.bool,\n  selected: PropTypes.bool,\n  quiet: PropTypes.bool,\n  today: PropTypes.bool,\n};\n\nDatepickerCalendarCell.defaultProps = {\n  accessibility: datepickerCalendarCellBehavior,\n  as: 'td',\n};\n","import { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { BoxProps, Box } from '../Box/Box';\n\nexport type DatepickerCalendarHeaderCellProps = {};\n\nexport type DatepickerCalendarHeaderCellStylesProps = {};\n\nexport const datepickerCalendarHeaderCellClassName = 'ui-datepicker__calendarheadercell';\n/**\n * A DatepickerCalendarHeaderCell is used to display header cells in DatepickerCalendar grid.\n */\nexport const DatepickerCalendarHeaderCell = compose<\n  'th',\n  DatepickerCalendarHeaderCellProps,\n  DatepickerCalendarHeaderCellStylesProps,\n  BoxProps,\n  {}\n>(Box, {\n  className: datepickerCalendarHeaderCellClassName,\n  displayName: 'DatepickerCalendarHeaderCell',\n  overrideStyles: true,\n  shorthandConfig: {\n    mappedProp: 'content',\n  },\n});\n\nDatepickerCalendarHeaderCell.defaultProps = {\n  as: 'th',\n};\n\nDatepickerCalendarHeaderCell.propTypes = commonPropTypes.createCommon();\n","import { IAvailableDateOptions } from './dateGrid.types';\n\nimport { isRestrictedDate } from './isRestrictedDate';\n\nimport { isAfterMaxDate } from './isAfterMaxDate';\n\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { compareDatePart, addDays } from '../dateMath/dateMath';\n\n/**\n * Returns closest available date given the restriction `options`, or undefined otherwise\n * @param options - list of search options\n */\nexport const findAvailableDate = (options: IAvailableDateOptions): Date | undefined => {\n  const { targetDate, initialDate, direction, ...restrictedDateOptions } = options;\n  let availableDate = targetDate;\n  // if the target date is available, return it immediately\n  if (!isRestrictedDate(targetDate, restrictedDateOptions)) {\n    return targetDate;\n  }\n\n  while (\n    compareDatePart(initialDate, availableDate) !== 0 &&\n    isRestrictedDate(availableDate, restrictedDateOptions) &&\n    !isAfterMaxDate(availableDate, restrictedDateOptions) &&\n    !isBeforeMinDate(availableDate, restrictedDateOptions)\n  ) {\n    availableDate = addDays(availableDate, direction);\n  }\n\n  if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {\n    return availableDate;\n  }\n\n  return undefined;\n};\n","import {\n  addMonths,\n  IAvailableDateOptions,\n  IRestrictedDatesOptions,\n  findAvailableDate,\n  addDays,\n  addWeeks,\n  isAfterMaxDate,\n  isBeforeMinDate,\n} from '../../utils/date-time-utilities';\n\nexport type NavigationKind = 'Month' | 'Week' | 'Day';\n\nexport const contstraintNavigatedDate = (\n  initialDate: Date,\n  targetDate: Date,\n  direction: number,\n  restrictedDatesOptions: IRestrictedDatesOptions,\n  navigateToDisabledDates: boolean,\n) => {\n  if (!targetDate) {\n    // if we couldn't find a target date at all, do nothing\n    return undefined;\n  }\n\n  const findAvailableDateOptions: IAvailableDateOptions = {\n    initialDate,\n    targetDate,\n    direction,\n    ...(!navigateToDisabledDates && restrictedDatesOptions),\n  };\n\n  let newNavigatedDate = findAvailableDate(findAvailableDateOptions);\n\n  if (!newNavigatedDate) {\n    // if no dates available in initial direction, try going backwards\n    findAvailableDateOptions.direction = -direction;\n    newNavigatedDate = findAvailableDate(findAvailableDateOptions);\n  }\n\n  if (!navigateToDisabledDates && isAfterMaxDate(targetDate, restrictedDatesOptions)) {\n    newNavigatedDate = restrictedDatesOptions.maxDate;\n  } else if (!navigateToDisabledDates && isBeforeMinDate(targetDate, restrictedDatesOptions)) {\n    newNavigatedDate = restrictedDatesOptions.minDate;\n  }\n\n  return newNavigatedDate;\n};\n\nexport const navigateToNewDate = (\n  originalDate: Date,\n  kind: NavigationKind,\n  step: number,\n  restrictedDatesOptions: IRestrictedDatesOptions,\n  navigateToDisabledDates: boolean,\n): Date => {\n  let targetDate: Date | null = null;\n  const targetDayDirection = step > 0 ? 1 : -1;\n\n  switch (kind) {\n    case 'Month': {\n      targetDate = addMonths(originalDate, targetDayDirection);\n      break;\n    }\n    case 'Week': {\n      targetDate = addWeeks(originalDate, targetDayDirection);\n      break;\n    }\n    case 'Day': {\n      targetDate = addDays(originalDate, targetDayDirection);\n      break;\n    }\n    default:\n      break;\n  }\n\n  return contstraintNavigatedDate(originalDate, targetDate, step, restrictedDatesOptions, navigateToDisabledDates);\n};\n","import { Accessibility, datepickerCalendarBehavior, DatepickerCalendarBehaviorProps } from '@fluentui/accessibility';\nimport {\n  DateRangeType,\n  DayOfWeek,\n  DAYS_IN_WEEK,\n  FirstWeekOfYear,\n  getDayGrid,\n  IDay,\n  DEFAULT_CALENDAR_STRINGS,\n  ICalendarStrings,\n  IDayGridOptions,\n  IDateGridStrings,\n  IRestrictedDatesOptions,\n  compareDates,\n  compareDatePart,\n  getMonthStart,\n  getMonthEnd,\n  getStartDateOfWeek,\n  getEndDateOfWeek,\n} from '../../utils/date-time-utilities';\nimport {\n  ForwardRefWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\nimport { commonPropTypes, createShorthand, UIComponentProps } from '../../utils';\nimport { DatepickerCalendarGrid, DatepickerCalendarGridProps } from './DatepickerCalendarGrid';\nimport { DatepickerCalendarGridRow, DatepickerCalendarGridRowProps } from './DatepickerCalendarGridRow';\nimport { DatepickerCalendarHeader, DatepickerCalendarHeaderProps } from './DatepickerCalendarHeader';\nimport { DatepickerCalendarCellProps, DatepickerCalendarCell } from './DatepickerCalendarCell';\nimport { DatepickerCalendarCellButtonProps, DatepickerCalendarCellButton } from './DatepickerCalendarCellButton';\nimport { DatepickerCalendarHeaderCellProps, DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell';\nimport { navigateToNewDate, contstraintNavigatedDate } from './navigateToNewDate';\n\nexport interface DatepickerCalendarProps extends UIComponentProps, Partial<ICalendarStrings>, Partial<IDayGridOptions> {\n  /** Calendar can have header. */\n  header?: ShorthandValue<DatepickerCalendarHeaderProps>;\n\n  /** A render function to customize how cells are rendered in the Calendar. */\n  calendarCell?: ShorthandValue<DatepickerCalendarCellProps>;\n\n  /** A render function to customize how cell's buttons are rendered in the Calendar. */\n  calendarCellButton?: ShorthandValue<DatepickerCalendarCellButtonProps>;\n\n  /** A render function to customize how header cells are rendered in the Calendar. */\n  calendarHeaderCell?: ShorthandValue<DatepickerCalendarHeaderCellProps>;\n\n  /** A render function to customize how the calendar grid is rendered. */\n  calendarGrid?: ShorthandValue<DatepickerCalendarGridProps>;\n\n  /** A render function to customize how the calendar grid row is rendered. */\n  calendarGridRow?: ShorthandValue<DatepickerCalendarGridRowProps>;\n\n  /**\n   * The currently selected date range, currently only supports week.\n   */\n  selectedDateRange?: Date[];\n\n  /**\n   * The currently selected date.\n   */\n  selectedDate?: Date;\n  /**\n   * The currently navigated date.\n   */\n  navigatedDate?: Date;\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<DatepickerCalendarBehaviorProps>;\n\n  /**\n   * Called on change of the date.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onDateChange?: ComponentEventHandler<DatepickerCalendarProps & { value: IDay }>;\n}\n\nexport type DatepickerCalendarStylesProps = never;\n\nexport const datepickerCalendarClassName = 'ui-datepicker__calendar';\n\nconst normalizeDateInGrid = (date: Date): Date => {\n  const result = new Date(date.getTime());\n  result.setDate(1);\n  return result;\n};\n\n/**\n * A DatepickerCalendar is used to display dates in sematically grouped way.\n */\nexport const DatepickerCalendar = (React.forwardRef<HTMLDivElement, DatepickerCalendarProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(DatepickerCalendar.displayName, context.telemetry);\n  setStart();\n\n  const {\n    className,\n    design,\n    styles,\n    variables,\n    calendarHeaderCell,\n    calendarCell,\n    calendarCellButton,\n    calendarGrid,\n    calendarGridRow,\n    dateRangeType,\n    header,\n    selectedDate,\n    navigatedDate,\n    firstDayOfWeek,\n    today,\n    formatMonthDayYear,\n    formatMonthYear,\n    shortDays,\n    days,\n    minDate,\n    maxDate,\n    restrictedDates,\n  } = props;\n\n  const restrictedDatesOptions: IRestrictedDatesOptions = {\n    minDate,\n    maxDate,\n    restrictedDates,\n  };\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DatepickerCalendar.handledProps, props);\n\n  const updateNavigatedDate = (date: Date) => {\n    if (!!date) {\n      if (!shouldFocusInDayGrid) {\n        setShouldFocusInDayGrid(true);\n      }\n      setGridNavigatedDate(date);\n    }\n  };\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: DatepickerCalendar.displayName,\n    actionHandlers: {\n      addWeek: e => {\n        e.preventDefault();\n        const newNavigatedDate = navigateToNewDate(gridNavigatedDate, 'Week', 1, restrictedDatesOptions, true);\n        updateNavigatedDate(newNavigatedDate);\n      },\n      subtractWeek: e => {\n        e.preventDefault();\n        const newNavigatedDate = navigateToNewDate(gridNavigatedDate, 'Week', -1, restrictedDatesOptions, true);\n        updateNavigatedDate(newNavigatedDate);\n      },\n      addDay: e => {\n        e.preventDefault();\n        const newNavigatedDate = navigateToNewDate(gridNavigatedDate, 'Day', 1, restrictedDatesOptions, true);\n        updateNavigatedDate(newNavigatedDate);\n      },\n      subtractDay: e => {\n        e.preventDefault();\n        const newNavigatedDate = navigateToNewDate(gridNavigatedDate, 'Day', -1, restrictedDatesOptions, true);\n        updateNavigatedDate(newNavigatedDate);\n      },\n      moveToStartOfWeek: e => {\n        e.preventDefault();\n        const targetDate = getStartDateOfWeek(gridNavigatedDate, firstDayOfWeek);\n        const newNavigatedDate = contstraintNavigatedDate(\n          gridNavigatedDate,\n          targetDate,\n          -1,\n          restrictedDatesOptions,\n          true,\n        );\n\n        updateNavigatedDate(newNavigatedDate);\n      },\n      moveToEndOfWeek: e => {\n        e.preventDefault();\n        const targetDate = getEndDateOfWeek(gridNavigatedDate, firstDayOfWeek);\n        const newNavigatedDate = contstraintNavigatedDate(\n          gridNavigatedDate,\n          targetDate,\n          -1,\n          restrictedDatesOptions,\n          true,\n        );\n\n        updateNavigatedDate(newNavigatedDate);\n      },\n      moveToStartOfColumn: e => {\n        e.preventDefault();\n        const targetDayOfWeek = gridNavigatedDate.getDay();\n        const targetDate = _.find(visibleGrid[0], day => day.originalDate.getDay() === targetDayOfWeek)?.originalDate;\n\n        const newNavigatedDate = contstraintNavigatedDate(\n          gridNavigatedDate,\n          targetDate,\n          -1,\n          restrictedDatesOptions,\n          true,\n        );\n\n        updateNavigatedDate(newNavigatedDate);\n      },\n      moveToEndOfColumn: e => {\n        e.preventDefault();\n        const targetDayOfWeek = gridNavigatedDate.getDay();\n        const targetDate = _.find(\n          visibleGrid[visibleGrid.length - 1],\n          day => day.originalDate.getDay() === targetDayOfWeek,\n        )?.originalDate;\n\n        const newNavigatedDate = contstraintNavigatedDate(\n          gridNavigatedDate,\n          targetDate,\n          -1,\n          restrictedDatesOptions,\n          true,\n        );\n\n        updateNavigatedDate(newNavigatedDate);\n      },\n    },\n    rtl: context.rtl,\n  });\n\n  const [gridNavigatedDate, setGridNavigatedDate] = React.useState<Date>(\n    () => new Date((navigatedDate || today || new Date()).getTime()),\n  );\n  const [normalizedGridDate, setNormalizedGridDate] = React.useState<Date>(() =>\n    normalizeDateInGrid(gridNavigatedDate),\n  );\n\n  const [shouldFocusInDayGrid, setShouldFocusInDayGrid] = React.useState<boolean>(true);\n\n  const { classes } = useStyles<DatepickerCalendarStylesProps>(DatepickerCalendar.displayName, {\n    className: datepickerCalendarClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const visibleGrid = React.useMemo<IDay[][]>(() => {\n    const dayGridOptions: IDayGridOptions = {\n      selectedDate,\n      navigatedDate: normalizedGridDate,\n      weeksToShow: props.weeksToShow,\n      firstDayOfWeek: props.firstDayOfWeek,\n      firstWeekOfYear: props.firstWeekOfYear,\n      dateRangeType: props.dateRangeType,\n      daysToSelectInDayView: props.daysToSelectInDayView,\n      today: props.today,\n      showWeekNumbers: props.showWeekNumbers,\n      workWeekDays: props.workWeekDays,\n      minDate: props.minDate,\n      maxDate: props.maxDate,\n      restrictedDates: props.restrictedDates,\n    };\n    const grid = getDayGrid(dayGridOptions);\n    return grid.slice(1, grid.length - 1); // slicing off first and last weeks, cause we don't use them for transitions\n  }, [selectedDate, normalizedGridDate, props]);\n\n  React.useEffect(() => {\n    const newNormalizedDate = normalizeDateInGrid(gridNavigatedDate);\n\n    if (compareDatePart(newNormalizedDate, normalizedGridDate)) {\n      // Do not change the grid immediately the month changes but only once the date stops being visible.\n      const gridContainsNavigatedDate = visibleGrid.find(week =>\n        week.find(day => compareDatePart(day.originalDate, gridNavigatedDate) === 0),\n      );\n      if (!gridContainsNavigatedDate) {\n        setNormalizedGridDate(newNormalizedDate);\n      }\n    }\n  }, [gridNavigatedDate, visibleGrid, normalizedGridDate]);\n\n  const dateFormatting: IDateGridStrings = {\n    months: props.months,\n    shortMonths: props.shortMonths,\n    days: props.days,\n    shortDays: props.shortDays,\n  };\n\n  const focusDateRef = React.useRef(null);\n\n  const changeMonth = (nextMonth: boolean) => {\n    const newNavigatedDate = navigateToNewDate(\n      normalizedGridDate,\n      'Month',\n      nextMonth ? 1 : -1,\n      restrictedDatesOptions,\n      true,\n    );\n    if (!!newNavigatedDate) {\n      setGridNavigatedDate(newNavigatedDate);\n      setShouldFocusInDayGrid(false);\n      setNormalizedGridDate(normalizeDateInGrid(newNavigatedDate));\n    }\n  };\n\n  const prevMonthOutOfBounds = minDate ? compareDatePart(minDate, getMonthStart(normalizedGridDate)) >= 0 : false;\n  const nextMonthOutOfBounds = maxDate ? compareDatePart(getMonthEnd(normalizedGridDate), maxDate) >= 0 : false;\n  React.useEffect(() => {\n    if (shouldFocusInDayGrid) {\n      focusDateRef.current?.focus();\n    }\n  }, [gridNavigatedDate, normalizedGridDate, shouldFocusInDayGrid]);\n\n  const renderCell = (day: IDay, content) =>\n    createShorthand(DatepickerCalendarCell, calendarCell, {\n      defaultProps: () =>\n        getA11yProps('calendarCell', {\n          content,\n          key: day.key,\n          selected: day.isSelected,\n          disabled: !day.isInBounds,\n          quiet: !day.isInMonth,\n          today: compareDates(day.originalDate, props.today ?? new Date()),\n        }),\n    });\n\n  const renderCellButton = (day: IDay, dateRange: IDay[]) =>\n    createShorthand(DatepickerCalendarCellButton, calendarCellButton, {\n      defaultProps: () =>\n        getA11yProps('calendarCell', {\n          content: day.date,\n          'aria-label': formatMonthDayYear(day.originalDate, dateFormatting),\n          selected: day.isSelected,\n          disabled: !day.isInBounds,\n          quiet: !day.isInMonth,\n          today: compareDates(day.originalDate, props.today ?? new Date()),\n        }),\n      overrideProps: (\n        predefinedProps: DatepickerCalendarCellButtonProps & { ref: React.Ref<HTMLButtonElement> },\n      ): DatepickerCalendarCellButtonProps & { ref: React.Ref<HTMLButtonElement> } => ({\n        onFocus: e => {\n          setGridNavigatedDate(day.originalDate);\n          _.invoke(predefinedProps, 'onFocus', e, predefinedProps);\n        },\n        onClick: e => {\n          _.invoke(props, 'onDateChange', e, {\n            ...props,\n            value: day,\n            selectedDateRange: dateRangeType !== DateRangeType.Day ? dateRange : [day],\n          });\n          _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n        },\n        ref: compareDates(gridNavigatedDate, day.originalDate) ? focusDateRef : null,\n      }),\n    });\n  const renderWeekRow = (week: IDay[]) => _.map(week, (day: IDay) => renderCell(day, renderCellButton(day, week)));\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...unhandledProps,\n      })}\n    >\n      {createShorthand(DatepickerCalendarHeader, header, {\n        defaultProps: () => ({\n          label: formatMonthYear(normalizedGridDate, dateFormatting),\n          'aria-label': formatMonthYear(normalizedGridDate, dateFormatting),\n          disabledNextButton: nextMonthOutOfBounds,\n          disabledPreviousButton: prevMonthOutOfBounds,\n          prevMonthAriaLabel: props.prevMonthAriaLabel,\n          nextMonthAriaLabel: props.nextMonthAriaLabel,\n        }),\n        overrideProps: (predefinedProps: DatepickerCalendarHeaderProps): DatepickerCalendarHeaderProps => ({\n          onPreviousClick: (e, data) => {\n            changeMonth(false);\n            _.invoke(predefinedProps, 'onPreviousClick', e, data);\n          },\n          onNextClick: (e, data) => {\n            changeMonth(true);\n            _.invoke(predefinedProps, 'onNextClick', e, data);\n          },\n        }),\n      })}\n      {createShorthand(DatepickerCalendarGrid, calendarGrid, {\n        defaultProps: () =>\n          getA11yProps('calendarGrid', {\n            content: (\n              <>\n                <thead>\n                  {createShorthand(DatepickerCalendarGridRow, calendarGridRow, {\n                    defaultProps: () =>\n                      getA11yProps('calendarGridRow', {\n                        children: _.times(DAYS_IN_WEEK, dayNumber =>\n                          createShorthand(DatepickerCalendarHeaderCell, calendarHeaderCell, {\n                            defaultProps: () =>\n                              getA11yProps('calendarHeaderCell', {\n                                'aria-label': days[(dayNumber + firstDayOfWeek) % DAYS_IN_WEEK],\n                                content: shortDays[(dayNumber + firstDayOfWeek) % DAYS_IN_WEEK],\n                                key: dayNumber,\n                              }),\n                          }),\n                        ),\n                      }),\n                  })}\n                </thead>\n                <tbody>\n                  {_.map(visibleGrid, week =>\n                    createShorthand(DatepickerCalendarGridRow, calendarGridRow, {\n                      defaultProps: () =>\n                        getA11yProps('calendarGridRow', {\n                          children: renderWeekRow(week),\n                          isRowSelectionActive: dateRangeType === DateRangeType.Week,\n                          key: week[0].key,\n                        }),\n                    }),\n                  )}\n                </tbody>\n              </>\n            ),\n          }),\n      })}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, DatepickerCalendarProps> &\n  FluentComponentStaticProps<DatepickerCalendarProps>;\n\nDatepickerCalendar.displayName = 'DatepickerCalendar';\n\nDatepickerCalendar.propTypes = {\n  ...commonPropTypes.createCommon(),\n  calendarCell: customPropTypes.itemShorthand,\n  calendarCellButton: customPropTypes.itemShorthand,\n  calendarHeaderCell: customPropTypes.itemShorthand,\n  header: customPropTypes.itemShorthand,\n  calendarGrid: customPropTypes.itemShorthand,\n  calendarGridRow: customPropTypes.itemShorthand,\n  onDateChange: PropTypes.func,\n  selectedDate: PropTypes.instanceOf(Date),\n  navigatedDate: PropTypes.instanceOf(Date),\n\n  minDate: PropTypes.instanceOf(Date),\n  maxDate: PropTypes.instanceOf(Date),\n  restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n\n  firstDayOfWeek: PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name])),\n  firstWeekOfYear: PropTypes.oneOf(Object.keys(FirstWeekOfYear).map(name => FirstWeekOfYear[name])),\n  dateRangeType: PropTypes.oneOf(Object.keys(DateRangeType).map(name => DateRangeType[name])),\n  daysToSelectInDayView: PropTypes.number,\n  today: PropTypes.instanceOf(Date),\n  showWeekNumbers: PropTypes.bool,\n  workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name]))),\n  weeksToShow: PropTypes.number,\n\n  formatDay: PropTypes.func,\n  formatYear: PropTypes.func,\n  formatMonthDayYear: PropTypes.func,\n  formatMonthYear: PropTypes.func,\n\n  parseDate: PropTypes.func,\n\n  months: PropTypes.arrayOf(PropTypes.string),\n  shortMonths: PropTypes.arrayOf(PropTypes.string),\n  days: PropTypes.arrayOf(PropTypes.string),\n  shortDays: PropTypes.arrayOf(PropTypes.string),\n\n  isRequiredErrorMessage: PropTypes.string,\n  invalidInputErrorMessage: PropTypes.string,\n  isOutOfBoundsErrorMessage: PropTypes.string,\n  goToToday: PropTypes.string,\n  openCalendarTitle: PropTypes.string,\n  inputPlaceholder: PropTypes.string,\n  prevMonthAriaLabel: PropTypes.string,\n  nextMonthAriaLabel: PropTypes.string,\n  prevYearAriaLabel: PropTypes.string,\n  nextYearAriaLabel: PropTypes.string,\n  prevYearRangeAriaLabel: PropTypes.string,\n  nextYearRangeAriaLabel: PropTypes.string,\n  monthPickerHeaderAriaLabel: PropTypes.string,\n  yearPickerHeaderAriaLabel: PropTypes.string,\n  closeButtonAriaLabel: PropTypes.string,\n  weekNumberFormatString: PropTypes.string,\n  selectedDateFormatString: PropTypes.string,\n  todayDateFormatString: PropTypes.string,\n\n  inputAriaLabel: PropTypes.string,\n  inputBoundedFormatString: PropTypes.string,\n  inputMinBoundedFormatString: PropTypes.string,\n  inputMaxBoundedFormatString: PropTypes.string,\n};\n\nDatepickerCalendar.defaultProps = {\n  accessibility: datepickerCalendarBehavior,\n  firstDayOfWeek: DayOfWeek.Monday,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  dateRangeType: DateRangeType.Day,\n  header: {},\n  calendarCell: {},\n  calendarCellButton: {},\n  calendarHeaderCell: {},\n  calendarGrid: {},\n  calendarGridRow: {},\n  ...DEFAULT_CALENDAR_STRINGS,\n};\n\nDatepickerCalendar.handledProps = Object.keys(DatepickerCalendar.propTypes) as any;\n","import { isRestrictedDate, IRestrictedDatesOptions, ICalendarStrings } from '../../utils/date-time-utilities';\n\nexport const validateDate = (\n  futureSelectedDate: Date,\n  futureFormattedDate: string,\n  calendarOptions: IRestrictedDatesOptions,\n  dateFormatting: ICalendarStrings,\n  required: boolean,\n): string => {\n  if (futureSelectedDate && !isNaN(futureSelectedDate.getTime())) {\n    if (isRestrictedDate(futureSelectedDate, calendarOptions)) {\n      return dateFormatting.isOutOfBoundsErrorMessage;\n    }\n  } else if (futureFormattedDate) {\n    return dateFormatting.invalidInputErrorMessage;\n  } else if (required && !futureSelectedDate) {\n    return dateFormatting.isRequiredErrorMessage;\n  }\n  return '';\n};\n","// Regex that finds { and } so they can be removed on a lookup for string format\nconst FORMAT_ARGS_REGEX = /[\\{\\}]/g;\n\n// Regex that finds {#} so it can be replaced by the arguments in string format\nconst FORMAT_REGEX = /\\{\\d+\\}/g;\n\n/**\n * String format method, used for scenarios where at runtime you\n * need to evaluate a formatted string given a tokenized string. This\n * usually only is needed in localization scenarios.\n\n * @example\n * ```tsx\n * \"I love {0} every {1}\".format(\"CXP\")\n * ```\n * will result in a Debug Exception.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function format(s: string, ...values: any[]): string {\n  let args = values;\n  // Callback match function\n  function replaceFunc(match: string): string {\n    // looks up in the args\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let replacement = args[match.replace(FORMAT_ARGS_REGEX, '') as any];\n\n    // catches undefined in nondebug and null in debug and nondebug\n    if (replacement === null || replacement === undefined) {\n      replacement = '';\n    }\n\n    return replacement;\n  }\n  return s.replace(FORMAT_REGEX, replaceFunc);\n}\n","import {\n  Accessibility,\n  datepickerBehavior,\n  DatepickerBehaviorProps,\n  AccessibilityAttributes,\n} from '@fluentui/accessibility';\nimport {\n  DateRangeType,\n  DayOfWeek,\n  FirstWeekOfYear,\n  DEFAULT_CALENDAR_STRINGS,\n  IDayGridOptions,\n  ICalendarStrings,\n  IDatepickerOptions,\n  IRestrictedDatesOptions,\n} from '../../utils/date-time-utilities';\n\nimport {\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n  useAutoControlled,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nimport { CalendarIcon } from '@fluentui/react-icons-northstar';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { handleRef } from '@fluentui/react-component-ref';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\nimport { commonPropTypes, createShorthand, createShorthandFactory, UIComponentProps } from '../../utils';\nimport { Button } from '../Button/Button';\nimport { Input, InputProps } from '../Input/Input';\nimport { Popup, PopupProps } from '../Popup/Popup';\nimport { DatepickerCalendar, DatepickerCalendarProps } from './DatepickerCalendar';\nimport { DatepickerCalendarCell } from './DatepickerCalendarCell';\nimport { DatepickerCalendarCellButton } from './DatepickerCalendarCellButton';\nimport { DatepickerCalendarHeader } from './DatepickerCalendarHeader';\nimport { DatepickerCalendarHeaderAction } from './DatepickerCalendarHeaderAction';\nimport { DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell';\nimport { DatepickerCalendarGrid } from './DatepickerCalendarGrid';\nimport { DatepickerCalendarGridRow } from './DatepickerCalendarGridRow';\nimport { validateDate } from './validateDate';\nimport { format } from '@uifabric/utilities';\n\nexport interface DatepickerProps extends UIComponentProps, Partial<ICalendarStrings>, Partial<IDatepickerOptions> {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<DatepickerBehaviorProps>;\n\n  /** Identifies the element (or elements) that labels the current element. Will be passed to `input` with usage accessibibility behavior. */\n  'aria-labelledby'?: AccessibilityAttributes['aria-labelledby'];\n\n  /** Indicates the entered value does not conform to the format expected by the application. Will be passed to `input` with usage accessibibility behavior. */\n  'aria-invalid'?: AccessibilityAttributes['aria-invalid'];\n\n  /** Shorthand for the datepicker calendar. */\n  calendar?: ShorthandValue<DatepickerCalendarProps>;\n\n  /** Shorthand for the datepicker popup. */\n  popup?: ShorthandValue<PopupProps>;\n\n  /** Shorthand for the date text input. */\n  input?: ShorthandValue<InputProps>;\n\n  /** Datepicker shows it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** Date needs to be entered, otherwise datepicker produces an error state. */\n  required?: boolean;\n\n  /**\n   * Called on change of the date.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onDateChange?: ComponentEventHandler<DatepickerProps & { value: Date }>;\n\n  /**\n   * Called on error when changing the date.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onDateChangeError?: ComponentEventHandler<DatepickerProps & { error: string }>;\n\n  /** Target dates can be also entered through the input field. */\n  allowManualInput?: boolean;\n\n  /** The component automatically overrides faulty manual input upon blur. */\n  fallbackToLastCorrectDateOnBlur?: boolean;\n\n  /** Initial 'calendarOpenState' value. */\n  defaultCalendarOpenState?: boolean;\n\n  /** Controls the calendar's open state. */\n  calendarOpenState?: boolean;\n\n  /** Initial 'selectedDate' value. */\n  defaultSelectedDate?: Date;\n\n  /** Controls the calendar's 'selectedDate'. */\n  selectedDate?: Date;\n\n  /** Marks that the datepicker should only render the input field and not the trigger button with an icon. */\n  inputOnly?: boolean;\n\n  /** Marks that the datepicker should only render the trigger button with an icon and not the input field. */\n  buttonOnly?: boolean;\n}\n\nexport type DatepickerStylesProps = Pick<DatepickerProps, 'allowManualInput'>;\n\nexport const datepickerClassName = 'ui-datepicker';\n\nconst formatRestrictedInput = (restrictedOptions: IRestrictedDatesOptions, localizationStrings: ICalendarStrings) => {\n  let formattedString = '';\n  if (!!restrictedOptions.minDate && !!restrictedOptions.maxDate) {\n    formattedString = format(\n      localizationStrings.inputBoundedFormatString,\n      localizationStrings.formatMonthDayYear(restrictedOptions.minDate, localizationStrings),\n      localizationStrings.formatMonthDayYear(restrictedOptions.maxDate, localizationStrings),\n    );\n  } else if (!!restrictedOptions.minDate) {\n    formattedString = format(\n      localizationStrings.inputMinBoundedFormatString,\n      localizationStrings.formatMonthDayYear(restrictedOptions.minDate, localizationStrings),\n    );\n  } else if (!!restrictedOptions.maxDate) {\n    formattedString = format(\n      localizationStrings.inputMaxBoundedFormatString,\n      localizationStrings.formatMonthDayYear(restrictedOptions.maxDate, localizationStrings),\n    );\n  } else {\n    formattedString = localizationStrings.inputAriaLabel;\n  }\n\n  return formattedString;\n};\n\n/**\n * A Datepicker is a control which is used to display dates grid and allow user to select them.\n *\n * @accessibilityIssues\n * [NVDA - Aria-selected is not narrated for the gridcell](https://github.com/nvaccess/nvda/issues/11986)\n */\nexport const Datepicker = (React.forwardRef<HTMLDivElement, DatepickerProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Datepicker.displayName, context.telemetry);\n  setStart();\n  const inputRef = React.useRef<HTMLElement>();\n\n  // FIXME: This object is created every render, causing a cascade of useCallback/useEffect re-runs.\n  // Needs to be reworked by someone who understands the intent for when various updates ought to happen.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const dateFormatting: ICalendarStrings = {\n    formatDay: props.formatDay,\n    formatYear: props.formatYear,\n    formatMonthDayYear: props.formatMonthDayYear,\n    formatMonthYear: props.formatMonthYear,\n    parseDate: props.parseDate,\n    months: props.months,\n    shortMonths: props.shortMonths,\n    days: props.days,\n    shortDays: props.shortDays,\n    isRequiredErrorMessage: props.isRequiredErrorMessage,\n    invalidInputErrorMessage: props.invalidInputErrorMessage,\n    isOutOfBoundsErrorMessage: props.isOutOfBoundsErrorMessage,\n    goToToday: props.goToToday,\n    openCalendarTitle: props.openCalendarTitle,\n    inputPlaceholder: props.inputPlaceholder,\n    prevMonthAriaLabel: props.prevMonthAriaLabel,\n    nextMonthAriaLabel: props.nextMonthAriaLabel,\n    prevYearAriaLabel: props.prevYearAriaLabel,\n    nextYearAriaLabel: props.nextYearAriaLabel,\n    prevYearRangeAriaLabel: props.prevYearRangeAriaLabel,\n    nextYearRangeAriaLabel: props.nextYearRangeAriaLabel,\n    monthPickerHeaderAriaLabel: props.monthPickerHeaderAriaLabel,\n    yearPickerHeaderAriaLabel: props.yearPickerHeaderAriaLabel,\n    closeButtonAriaLabel: props.closeButtonAriaLabel,\n    weekNumberFormatString: props.weekNumberFormatString,\n    selectedDateFormatString: props.selectedDateFormatString,\n    todayDateFormatString: props.todayDateFormatString,\n    inputAriaLabel: props.inputAriaLabel,\n    inputBoundedFormatString: props.inputBoundedFormatString,\n    inputMinBoundedFormatString: props.inputMinBoundedFormatString,\n    inputMaxBoundedFormatString: props.inputMaxBoundedFormatString,\n  };\n\n  const {\n    calendar,\n    popup,\n    input,\n    className,\n    design,\n    styles,\n    variables,\n    formatMonthDayYear,\n    allowManualInput,\n    'aria-labelledby': ariaLabelledby,\n    'aria-invalid': ariaInvalid,\n  } = props;\n\n  const valueFormatter = React.useCallback(\n    date =>\n      date\n        ? formatMonthDayYear(date, {\n            months: dateFormatting.months,\n            shortMonths: dateFormatting.shortMonths,\n            days: dateFormatting.days,\n            shortDays: dateFormatting.shortDays,\n          })\n        : '',\n    [\n      dateFormatting.days,\n      dateFormatting.months,\n      dateFormatting.shortDays,\n      dateFormatting.shortMonths,\n      formatMonthDayYear,\n    ],\n  );\n\n  const [openState, setOpenState] = useAutoControlled<boolean>({\n    defaultValue: props.defaultCalendarOpenState,\n    value: props.calendarOpenState,\n    initialValue: false,\n  });\n\n  const [selectedDate, setSelectedDate] = useAutoControlled<Date | undefined>({\n    defaultValue: props.defaultSelectedDate,\n    value: props.selectedDate,\n    initialValue: undefined,\n  });\n\n  const [formattedDate, setFormattedDate] = React.useState<string>(valueFormatter(selectedDate));\n\n  React.useEffect(() => {\n    setFormattedDate(valueFormatter(selectedDate));\n  }, [selectedDate, valueFormatter]);\n\n  const restrictedDatesOptions: IRestrictedDatesOptions = {\n    minDate: props.minDate,\n    maxDate: props.maxDate,\n    restrictedDates: props.restrictedDates,\n  };\n\n  const [error, setError] = React.useState<string>(() =>\n    !!props.selectedDate || !!props.defaultSelectedDate\n      ? validateDate(selectedDate, formattedDate, restrictedDatesOptions, dateFormatting, props.required)\n      : '',\n  );\n\n  const calendarOptions: IDayGridOptions = {\n    selectedDate,\n    navigatedDate: !!selectedDate && !error ? selectedDate : props.today ?? new Date(),\n    firstDayOfWeek: props.firstDayOfWeek,\n    firstWeekOfYear: props.firstWeekOfYear,\n    dateRangeType: props.dateRangeType,\n    daysToSelectInDayView: props.daysToSelectInDayView,\n    today: props.today,\n    showWeekNumbers: props.showWeekNumbers,\n    workWeekDays: props.workWeekDays,\n    ...restrictedDatesOptions,\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Datepicker.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Datepicker.displayName,\n    actionHandlers: {\n      open: e => {\n        if (allowManualInput) {\n          setOpenState(!openState);\n        } else {\n          // Keep popup open in case we can only enter the date through calendar.\n          setOpenState(true);\n        }\n\n        e.preventDefault();\n      },\n    },\n    mapPropsToBehavior: () => ({\n      'aria-invalid': ariaInvalid,\n      'aria-labelledby': ariaLabelledby,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<DatepickerStylesProps>(Datepicker.displayName, {\n    className: datepickerClassName,\n    mapPropsToStyles: () => ({\n      allowManualInput,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const overrideDatepickerCalendarProps = (predefinedProps: DatepickerCalendarProps): DatepickerCalendarProps => ({\n    onDateChange: (e, itemProps) => {\n      const targetDay = itemProps.value;\n      setSelectedDate(targetDay.originalDate);\n      setOpenState(false);\n      setError('');\n      setFormattedDate(valueFormatter(targetDay.originalDate));\n\n      _.invoke(props, 'onDateChange', e, { itemProps, value: targetDay.originalDate });\n    },\n  });\n\n  const calendarElement = createShorthand(DatepickerCalendar, calendar, {\n    defaultProps: () => getA11yProps('calendar', { ...calendarOptions, ...dateFormatting }),\n    overrideProps: overrideDatepickerCalendarProps,\n  });\n\n  const overrideInputProps = (predefinedProps: InputProps): InputProps => ({\n    onClick: (e): void => {\n      if (allowManualInput) {\n        setOpenState(!openState);\n      } else {\n        // Keep popup open in case we can only enter the date through calendar.\n        setOpenState(true);\n      }\n\n      _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n    },\n    onChange: (e, target: { value: string }) => {\n      const parsedDate = props.parseDate(target.value);\n      const validationError = validateDate(parsedDate, target.value, calendarOptions, dateFormatting, props.required);\n      setError(validationError);\n      setFormattedDate(target.value);\n      if (!!validationError) {\n        _.invoke(props, 'onDateChangeError', e, { ...props, error: validationError });\n      } else {\n        setSelectedDate(parsedDate);\n        _.invoke(props, 'onDateChange', e, { ...props, value: parsedDate });\n      }\n\n      _.invoke(predefinedProps, 'onChange', e, predefinedProps);\n    },\n    onBlur: e => {\n      if (props.fallbackToLastCorrectDateOnBlur && !!error) {\n        const futureFormattedDate = valueFormatter(selectedDate);\n        const validationError = validateDate(\n          selectedDate,\n          futureFormattedDate,\n          calendarOptions,\n          dateFormatting,\n          props.required,\n        );\n        setError(validationError);\n        setFormattedDate(futureFormattedDate);\n        if (!!validationError) {\n          _.invoke(props, 'onDateChangeError', e, { ...props, error: validationError });\n        }\n      }\n\n      _.invoke(predefinedProps, 'onBlur', e, predefinedProps);\n    },\n\n    inputRef: (node: HTMLInputElement) => {\n      handleRef(predefinedProps.inputRef, node);\n      inputRef.current = node;\n    },\n  });\n\n  const triggerButtonElement = props.inputOnly ? null : (\n    <Button icon={<CalendarIcon />} title={props.openCalendarTitle} iconOnly disabled={props.disabled} type=\"button\" />\n  );\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...unhandledProps,\n      })}\n    >\n      {!props.buttonOnly &&\n        createShorthand(Input, input, {\n          defaultProps: () =>\n            getA11yProps('input', {\n              placeholder: props.inputPlaceholder,\n              disabled: props.disabled,\n              error: !!error,\n              value: formattedDate,\n              readOnly: !allowManualInput,\n              required: props.required,\n              'aria-label': formatRestrictedInput(restrictedDatesOptions, dateFormatting),\n            }),\n          overrideProps: overrideInputProps,\n        })}\n      {createShorthand(Popup, popup, {\n        defaultProps: () => ({\n          open: openState && !props.disabled,\n          trapFocus: {\n            disableFirstFocus: true,\n          },\n          position: 'below' as const,\n          align: 'start' as const,\n        }),\n        overrideProps: (predefinedProps: PopupProps): PopupProps => ({\n          trigger: predefinedProps.trigger ?? triggerButtonElement,\n          target: props.buttonOnly ? null : inputRef.current,\n          content: calendarElement,\n          onOpenChange: (e, { open }) => {\n            // In case the event is a click on input, we ignore such events as it should be directly handled by input.\n            if (!(e.type === 'click' && e.target === inputRef?.current)) {\n              setOpenState(open);\n              _.invoke(predefinedProps, 'onOpenChange', e, { open });\n            }\n          },\n        }),\n      })}\n    </ElementType>,\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, DatepickerProps> &\n  FluentComponentStaticProps<DatepickerProps> & {\n    Calendar: typeof DatepickerCalendar;\n    CalendarHeader: typeof DatepickerCalendarHeader;\n    CalendarHeaderAction: typeof DatepickerCalendarHeaderAction;\n    CalendarHeaderCell: typeof DatepickerCalendarHeaderCell;\n    CalendarCell: typeof DatepickerCalendarCell;\n    CalendarCellButton: typeof DatepickerCalendarCellButton;\n    CalendarGrid: typeof DatepickerCalendarGrid;\n    CalendarGridRow: typeof DatepickerCalendarGridRow;\n    Input: typeof Input;\n  };\n\nDatepicker.displayName = 'Datepicker';\n\nDatepicker.propTypes = {\n  ...commonPropTypes.createCommon(),\n  calendar: customPropTypes.itemShorthand,\n  popup: customPropTypes.itemShorthand,\n  input: customPropTypes.itemShorthand,\n\n  disabled: PropTypes.bool,\n  required: PropTypes.bool,\n  onDateChange: PropTypes.func,\n  onDateChangeError: PropTypes.func,\n  allowManualInput: PropTypes.bool,\n  fallbackToLastCorrectDateOnBlur: PropTypes.bool,\n  defaultCalendarOpenState: PropTypes.bool,\n  calendarOpenState: PropTypes.bool,\n\n  selectedDate: PropTypes.instanceOf(Date),\n  defaultSelectedDate: PropTypes.instanceOf(Date),\n\n  inputOnly: PropTypes.bool,\n  buttonOnly: PropTypes.bool,\n\n  minDate: PropTypes.instanceOf(Date),\n  maxDate: PropTypes.instanceOf(Date),\n  restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n\n  firstDayOfWeek: PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name])),\n  firstWeekOfYear: PropTypes.oneOf(Object.keys(FirstWeekOfYear).map(name => FirstWeekOfYear[name])),\n  dateRangeType: PropTypes.oneOf(Object.keys(DateRangeType).map(name => DateRangeType[name])),\n  daysToSelectInDayView: PropTypes.number,\n  today: PropTypes.instanceOf(Date),\n  showWeekNumbers: PropTypes.bool,\n  workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name]))),\n\n  formatDay: PropTypes.func,\n  formatYear: PropTypes.func,\n  formatMonthDayYear: PropTypes.func,\n  formatMonthYear: PropTypes.func,\n\n  parseDate: PropTypes.func,\n\n  months: PropTypes.arrayOf(PropTypes.string),\n  shortMonths: PropTypes.arrayOf(PropTypes.string),\n  days: PropTypes.arrayOf(PropTypes.string),\n  shortDays: PropTypes.arrayOf(PropTypes.string),\n\n  isRequiredErrorMessage: PropTypes.string,\n  invalidInputErrorMessage: PropTypes.string,\n  isOutOfBoundsErrorMessage: PropTypes.string,\n  goToToday: PropTypes.string,\n  openCalendarTitle: PropTypes.string,\n  inputPlaceholder: PropTypes.string,\n  prevMonthAriaLabel: PropTypes.string,\n  nextMonthAriaLabel: PropTypes.string,\n  prevYearAriaLabel: PropTypes.string,\n  nextYearAriaLabel: PropTypes.string,\n  prevYearRangeAriaLabel: PropTypes.string,\n  nextYearRangeAriaLabel: PropTypes.string,\n  monthPickerHeaderAriaLabel: PropTypes.string,\n  yearPickerHeaderAriaLabel: PropTypes.string,\n  closeButtonAriaLabel: PropTypes.string,\n  weekNumberFormatString: PropTypes.string,\n  selectedDateFormatString: PropTypes.string,\n  todayDateFormatString: PropTypes.string,\n\n  inputAriaLabel: PropTypes.string,\n  inputBoundedFormatString: PropTypes.string,\n  inputMinBoundedFormatString: PropTypes.string,\n  inputMaxBoundedFormatString: PropTypes.string,\n\n  'aria-labelledby': PropTypes.string,\n  'aria-invalid': PropTypes.bool,\n};\n\nDatepicker.defaultProps = {\n  accessibility: datepickerBehavior,\n\n  inputOnly: false,\n  buttonOnly: false,\n  calendar: {},\n  popup: {},\n  input: {},\n\n  firstDayOfWeek: DayOfWeek.Monday,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  dateRangeType: DateRangeType.Day,\n\n  fallbackToLastCorrectDateOnBlur: true,\n  allowManualInput: true,\n  required: false,\n\n  ...DEFAULT_CALENDAR_STRINGS,\n};\n\nDatepicker.handledProps = Object.keys(Datepicker.propTypes) as any;\n\nDatepicker.create = createShorthandFactory({ Component: Datepicker });\n\nDatepicker.Calendar = DatepickerCalendar;\nDatepicker.CalendarHeader = DatepickerCalendarHeader;\nDatepicker.CalendarHeaderAction = DatepickerCalendarHeaderAction;\nDatepicker.CalendarHeaderCell = DatepickerCalendarHeaderCell;\nDatepicker.CalendarCell = DatepickerCalendarCell;\nDatepicker.CalendarCellButton = DatepickerCalendarCellButton;\nDatepicker.CalendarGrid = DatepickerCalendarGrid;\nDatepicker.CalendarGridRow = DatepickerCalendarGridRow;\nDatepicker.Input = Input;\n","import { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { Datepicker, DatepickerProps } from '../Datepicker/Datepicker';\nimport { _FormFieldBase, FormFieldBaseProps } from './utils/formFieldBase';\n\ninterface FormDatepickerOwnProps extends Omit<DatepickerProps, 'accessibility'> {}\ntype SelectedFormFieldCustomProps = Omit<\n  FormFieldBaseProps,\n  'control' | 'styles' | 'accessibility' | 'design' | 'variables'\n>;\nexport interface FormDatepickerProps extends SelectedFormFieldCustomProps, FormDatepickerOwnProps {}\nexport type FormDatepickerStylesProps = never;\n\nexport const formDatepickerClassName = 'ui-form__datepicker';\n\n/**\n * An FormDatepicker renders a Datepicker wrapped by FormField.\n */\nexport const FormDatepicker = compose<\n  'div',\n  FormDatepickerProps,\n  FormDatepickerStylesProps,\n  SelectedFormFieldCustomProps,\n  {}\n>(_FormFieldBase, {\n  className: formDatepickerClassName,\n  displayName: 'FormDatepicker',\n  overrideStyles: true,\n  slots: {\n    control: Datepicker,\n  },\n  slotProps: ({ errorMessage, required }) => ({\n    control: {\n      required,\n    },\n    message: {\n      error: !!errorMessage,\n    },\n  }),\n});\n\nFormDatepicker.propTypes = commonPropTypes.createCommon({\n  accessibility: false,\n  children: false,\n  content: false,\n});\n","import { Accessibility } from '../../types';\n\n/**\n * @specification\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'.\n */\nexport const textAreaBehavior: Accessibility<TextAreaBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      'aria-disabled': props.disabled,\n    },\n  },\n});\n\nexport type TextAreaBehaviorProps = {\n  disabled?: boolean;\n};\n","import { Accessibility, textAreaBehavior, TextAreaBehaviorProps } from '@fluentui/accessibility';\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { UIComponentProps, ChildrenComponentProps, commonPropTypes, createShorthandFactory } from '../../utils';\nimport {\n  useAutoControlled,\n  getElementType,\n  useTelemetry,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface TextAreaProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TextAreaBehaviorProps>;\n\n  /** The default value of the text area. */\n  defaultValue?: string;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<TextAreaProps>;\n\n  /** The value of the text area. */\n  value?: string;\n\n  /** The text area becomes read-only. */\n  disabled?: boolean;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /** A textarea can be resized. */\n  resize?: 'none' | 'both' | 'horizontal' | 'vertical';\n\n  /** A textarea can take the width of its container. */\n  fluid?: boolean;\n\n  /** A text area can have error state. */\n  error?: boolean;\n\n  /** A text area can be required to be valid. */\n  required?: boolean;\n}\n\nexport type TextAreaStylesProps = Required<Pick<TextAreaProps, 'inverted' | 'resize' | 'fluid' | 'disabled' | 'error'>>;\n\nexport const textAreaClassName = 'ui-textarea';\n\n/**\n * A TextArea is a multi-line plan-text editing control.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.\n * When using maxlength attribute, provide the information about max length in label for screen reader.\n * @accessibilityIssues\n * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)\n * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)\n */\nexport const TextArea = (React.forwardRef<HTMLTextAreaElement, TextAreaProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TextArea.displayName, context.telemetry);\n\n  setStart();\n\n  const { disabled, accessibility, inverted, resize, fluid, className, design, styles, variables, error } = props;\n\n  const [value, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    value: props.value,\n    initialValue: '',\n  });\n\n  const unhandledProps = useUnhandledProps(TextArea.handledProps, props);\n\n  const getA11yProps = useAccessibility<TextAreaBehaviorProps>(accessibility, {\n    debugName: TextArea.displayName,\n    mapPropsToBehavior: () => ({\n      disabled,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TextAreaStylesProps>(TextArea.displayName, {\n    className: textAreaClassName,\n    mapPropsToStyles: () => ({\n      inverted,\n      resize,\n      fluid,\n      disabled,\n      error,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n\n  const handleChange = (e: React.ChangeEvent | React.FormEvent) => {\n    const newValue = _.get(e, 'target.value');\n\n    _.invoke(props, 'onChange', e, { ...props, value: newValue });\n    setValue(newValue);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        value,\n        disabled,\n        ref,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    />\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'textarea', HTMLTextAreaElement, TextAreaProps> &\n  FluentComponentStaticProps<TextAreaProps>;\n\nTextArea.displayName = 'TextArea';\n\nTextArea.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  defaultValue: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  inverted: PropTypes.bool,\n  fluid: PropTypes.bool,\n  error: PropTypes.bool,\n  resize: PropTypes.oneOf(['none', 'both', 'horizontal', 'vertical']),\n};\n\nTextArea.defaultProps = {\n  as: 'textarea',\n  accessibility: textAreaBehavior,\n};\n\nTextArea.handledProps = Object.keys(TextArea.propTypes) as any;\n\nTextArea.create = createShorthandFactory({\n  Component: TextArea,\n});\n","import { compose } from '@fluentui/react-bindings';\nimport { TextArea, TextAreaProps } from '../TextArea/TextArea';\nimport { _FormFieldBase, FormFieldBaseProps } from './utils/formFieldBase';\nimport { commonPropTypes } from '../../utils';\n\ninterface FormTextAreaOwnProps extends Omit<TextAreaProps, 'accessibility'> {}\ntype SelectedFormFieldCustomProps = Omit<\n  FormFieldBaseProps,\n  'control' | 'styles' | 'accessibility' | 'design' | 'variables'\n>;\nexport interface FormTextAreaProps extends SelectedFormFieldCustomProps, FormTextAreaOwnProps {}\nexport type FormTextAreaStylesProps = never;\n\nexport const formTextAreaClassName = 'ui-form__textarea';\n\n/**\n * An FormTextArea renders a TextArea wrapped by FormField.\n */\nexport const FormTextArea = compose<\n  'textarea',\n  FormTextAreaProps,\n  FormTextAreaStylesProps,\n  SelectedFormFieldCustomProps,\n  {}\n>(_FormFieldBase, {\n  className: formTextAreaClassName,\n  displayName: 'FormTextArea',\n  overrideStyles: true,\n  slots: {\n    control: TextArea,\n  },\n  slotProps: ({ errorMessage, required }) => ({\n    label: {\n      required,\n    },\n    control: {\n      error: !!errorMessage,\n    },\n    message: {\n      error: !!errorMessage,\n    },\n  }),\n});\n\nFormTextArea.propTypes = commonPropTypes.createCommon({\n  children: false,\n  content: false,\n});\n","import { keyboardKey } from '../../keyboard-key';\nimport { Accessibility } from '../../types';\n\n/**\n * @description\n * Implements ARIA Radio Group design pattern.\n * @specification\n *  Adds role='radiogroup'. This allows screen readers to handle the component as a radio group.\n *  Triggers 'nextItem' action with 'ArrowDown' or 'ArrowRight' on 'root'.\n *  Triggers 'prevItem' action with 'ArrowUp' or 'ArrowLeft' on 'root'.\n */\nexport const radioGroupBehavior: Accessibility<RadioGroupBehaviorProps> = () => ({\n  attributes: {\n    root: {\n      role: 'radiogroup',\n    },\n  },\n\n  keyActions: {\n    root: {\n      nextItem: {\n        keyCombinations: [{ keyCode: keyboardKey.ArrowDown }, { keyCode: keyboardKey.ArrowRight }],\n      },\n      prevItem: {\n        keyCombinations: [{ keyCode: keyboardKey.ArrowUp }, { keyCode: keyboardKey.ArrowLeft }],\n      },\n    },\n  },\n});\n\nexport type RadioGroupBehaviorProps = never;\n","// TODO:\n// vertical - padding variable?\nimport { Accessibility, radioGroupBehavior, RadioGroupBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n} from '../../utils';\nimport { RadioGroupItem, RadioGroupItemProps } from './RadioGroupItem';\nimport { ComponentEventHandler, ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport {\n  useAutoControlled,\n  useTelemetry,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface RadioGroupProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<RadioGroupBehaviorProps>;\n\n  /** Value of the currently checked radio item. */\n  checkedValue?: number | string;\n\n  /**\n   * Called after radio group value is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All value props.\n   */\n  onCheckedValueChange?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** Initial checkedValue value. */\n  defaultCheckedValue?: number | string;\n\n  /** Shorthand array of props for RadioGroup. */\n  items?: ShorthandCollection<RadioGroupItemProps>;\n\n  /** A vertical radio group displays elements vertically. */\n  vertical?: boolean;\n}\n\nexport const radioGroupClassName = 'ui-radiogroup';\n\nexport type RadioGroupStylesProps = Required<Pick<RadioGroupProps, 'vertical'>>;\n\n/**\n * A RadioGroup allows user to select a value from a small set of mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Radio Group](https://www.w3.org/TR/wai-aria-practices-1.1/#radiobutton) design pattern.\n * @accessibilityIssues\n * [JAWS narrates instruction message on each radio in radiogroup](https://github.com/FreedomScientific/VFO-standards-support/issues/473)\n */\nexport const RadioGroup = (React.forwardRef<HTMLDivElement, RadioGroupProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(RadioGroup.displayName, context.telemetry);\n  setStart();\n\n  const { children, vertical, items, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(RadioGroup.handledProps, props);\n\n  const getA11yProps = useAccessibility<RadioGroupBehaviorProps>(props.accessibility, {\n    debugName: RadioGroup.displayName,\n    actionHandlers: {\n      nextItem: event => setCheckedItem(event, 1),\n      prevItem: event => setCheckedItem(event, -1),\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<RadioGroupStylesProps>(RadioGroup.displayName, {\n    className: radioGroupClassName,\n    mapPropsToStyles: () => ({\n      vertical,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const [checkedValue, setCheckedValue] = useAutoControlled({\n    defaultValue: props.defaultCheckedValue,\n    value: props.checkedValue,\n    initialValue: undefined,\n  });\n\n  const [shouldFocus, setShouldFocus] = React.useState(false);\n\n  const getItemProps = (item): RadioGroupItemProps => {\n    return (item as React.ReactElement<RadioGroupItemProps>).props || item;\n  };\n\n  const setCheckedItem = (event, direction) => {\n    const nextItem = findNextEnabledCheckedItem(direction);\n\n    if (nextItem) {\n      checkedValueChange({\n        nextCheckedValue: nextItem.value,\n        shouldFocus: true,\n        event,\n        itemProps: nextItem,\n      });\n    }\n    event.preventDefault();\n  };\n\n  const findNextEnabledCheckedItem = (direction): RadioGroupItemProps => {\n    if (!props.items || !props.items.length) {\n      return undefined;\n    }\n\n    const currentIndex =\n      // if none of the values selected, set current index to the first item\n      checkedValue !== undefined ? _.findIndex(props.items, item => getItemProps(item).value === checkedValue) : 0;\n\n    for (let newIndex = currentIndex + direction; newIndex !== currentIndex; newIndex += direction) {\n      if (newIndex < 0) {\n        newIndex = props.items.length - 1;\n      } else if (newIndex >= props.items.length) {\n        newIndex = 0;\n      }\n\n      if (newIndex === currentIndex) {\n        return undefined;\n      }\n\n      const itemProps = getItemProps(props.items[newIndex]);\n      if (!itemProps.disabled) {\n        return itemProps;\n      }\n    }\n    return undefined;\n  };\n\n  const handleItemOverrides = predefinedProps => ({\n    checked: typeof checkedValue !== 'undefined' && checkedValue === predefinedProps.value,\n    onClick: (event, itemProps) => {\n      const { value, disabled } = itemProps;\n      if (!disabled && value !== checkedValue) {\n        checkedValueChange({ nextCheckedValue: value, shouldFocus: false, event, itemProps });\n      }\n      _.invoke(predefinedProps, 'onClick', event, itemProps);\n    },\n    shouldFocus,\n  });\n\n  const renderItems = (vertical: boolean) => {\n    const isNoneValueSelected = checkedValue === undefined;\n    return _.map(items, (item, index) =>\n      RadioGroupItem.create(item, {\n        defaultProps: () =>\n          getA11yProps('item', {\n            vertical,\n            ...(index === 0 && isNoneValueSelected && { tabIndex: 0 }),\n          }),\n        overrideProps: handleItemOverrides,\n      }),\n    );\n  };\n\n  const checkedValueChange = ({\n    nextCheckedValue,\n    shouldFocus,\n    event,\n    itemProps,\n  }: {\n    nextCheckedValue: number | string;\n    shouldFocus: boolean;\n    event: React.SyntheticEvent;\n    itemProps: RadioGroupItemProps;\n  }) => {\n    setCheckedValue(nextCheckedValue);\n    setShouldFocus(shouldFocus);\n    _.invoke(props, 'onCheckedValueChange', event, itemProps);\n  };\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...unhandledProps,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n      })}\n    >\n      {childrenExist(children) ? children : renderItems(vertical)}\n    </ElementType>,\n  );\n\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, RadioGroupProps> &\n  FluentComponentStaticProps<RadioGroupProps> & {\n    Item: typeof RadioGroupItem;\n  };\n\nRadioGroup.displayName = 'RadioGroup';\n\nRadioGroup.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  checkedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  defaultCheckedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  items: customPropTypes.collectionShorthand,\n  onCheckedValueChange: PropTypes.func,\n  vertical: PropTypes.bool,\n};\n\nRadioGroup.defaultProps = {\n  accessibility: radioGroupBehavior,\n};\n\nRadioGroup.handledProps = Object.keys(RadioGroup.propTypes) as any;\n\nRadioGroup.Item = RadioGroupItem;\n\nRadioGroup.create = createShorthandFactory({\n  Component: RadioGroup,\n});\n","import { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { _FormFieldBase, FormFieldBaseProps } from './utils/formFieldBase';\nimport { RadioGroup, RadioGroupProps } from '../RadioGroup/RadioGroup';\n\ninterface FormRadioGroupOwnProps extends RadioGroupProps {}\ntype SelectedFormFieldCustomProps = Omit<\n  FormFieldBaseProps,\n  'control' | 'styles' | 'accessibility' | 'design' | 'variables'\n>;\nexport interface FormRadioGroupProps extends SelectedFormFieldCustomProps, FormRadioGroupOwnProps {}\nexport type FormRadioGroupStylesProps = never;\n\nexport const formRadioGroupClassName = 'ui-forms';\n\n/**\n * An FormRadioGroup renders a RadioGroup wrapped by FormField.\n */\nexport const FormRadioGroup = compose<\n  'div',\n  FormRadioGroupProps,\n  FormRadioGroupStylesProps,\n  SelectedFormFieldCustomProps,\n  {}\n>(_FormFieldBase, {\n  className: formRadioGroupClassName,\n  displayName: 'FormRadioGroup',\n  overrideStyles: true,\n  slots: {\n    control: RadioGroup,\n  },\n  slotProps: ({ errorMessage }) => ({\n    message: {\n      error: !!errorMessage,\n    },\n  }),\n});\n\nFormRadioGroup.propTypes = commonPropTypes.createCommon({\n  children: false,\n  content: false,\n});\n","import { Accessibility, FormFieldBehaviorProps, formFieldBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  getOrGenerateIdFromShorthand,\n} from '../../utils';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Text, TextProps } from '../Text/Text';\nimport { Input } from '../Input/Input';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface FormFieldProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<FormFieldBehaviorProps>;\n\n  /**\n   * @deprecated\n   * A control for the form field.\n   */\n  control?: ShorthandValue<BoxProps>;\n\n  /** The HTML input id. This will be set on the control element and will be use for linking it with the label for correct accessibility. */\n  id?: string;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** A label for the form field. */\n  label?: ShorthandValue<TextProps>;\n\n  /** Text message that will be displayed below the control (can be used for error, warning, success messages). */\n  message?: ShorthandValue<TextProps>;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /** A field can show that input is mandatory. */\n  required?: boolean;\n\n  /** The HTML input type. */\n  type?: string;\n\n  /** Message to be shown when input has error */\n  errorMessage?: ShorthandValue<TextProps>;\n}\n\nexport const formFieldClassName = 'ui-form__field';\nexport const formFieldMessageClassName = 'ui-form__field__message';\n\nexport type FormFieldStylesProps = Required<Pick<FormFieldProps, 'type' | 'inline' | 'required'>> & {\n  hasErrorMessage: boolean;\n};\n\n/**\n * A FormField represents a Form element containing a label and an input.\n */\nexport const FormField = (React.forwardRef<HTMLDivElement, FormFieldProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(FormField.displayName, context.telemetry);\n  setStart();\n\n  const {\n    children,\n    control,\n    id,\n    label,\n    message,\n    name,\n    required,\n    type,\n    className,\n    design,\n    styles,\n    variables,\n    inline,\n    errorMessage,\n  } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(FormField.handledProps, props);\n  const messageId = React.useRef<string>();\n  messageId.current = getOrGenerateIdFromShorthand('error-message-', message || errorMessage, messageId.current);\n  const labelId = React.useRef<string>();\n  labelId.current = getOrGenerateIdFromShorthand('form-label-', id, labelId.current);\n\n  const getA11yProps = useAccessibility<FormFieldBehaviorProps>(props.accessibility, {\n    debugName: FormField.displayName,\n    mapPropsToBehavior: () => ({\n      hasErrorMessage: !!errorMessage,\n      messageId: messageId.current,\n      labelId: labelId.current,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<FormFieldStylesProps>(FormField.displayName, {\n    className: formFieldClassName,\n    mapPropsToStyles: () => ({\n      type,\n      inline,\n      required,\n      hasErrorMessage: !!errorMessage,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const labelElement = Text.create(label, {\n    defaultProps: () =>\n      getA11yProps('label', {\n        as: 'label',\n        htmlFor: id,\n        id: labelId.current,\n        styles: resolvedStyles.label,\n      }),\n  });\n\n  const messageElement = Text.create(errorMessage || message, {\n    defaultProps: () =>\n      getA11yProps('message', {\n        className: formFieldMessageClassName,\n        id: messageId.current,\n        styles: resolvedStyles.message,\n      }),\n  });\n\n  const controlElement = Box.create(control || {}, {\n    defaultProps: () =>\n      getA11yProps('control', {\n        required,\n        name,\n        id,\n        type,\n        error: !!errorMessage || null,\n        styles: resolvedStyles.control,\n      }),\n  });\n\n  const shouldControlAppearFirst = () => {\n    return type && (type === 'checkbox' || type === 'radio');\n  };\n\n  const content = (\n    <>\n      {shouldControlAppearFirst() && controlElement}\n      {labelElement}\n      {!shouldControlAppearFirst() && controlElement}\n      {messageElement}\n    </>\n  );\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, FormFieldProps> & FluentComponentStaticProps<FormFieldProps>;\n\nFormField.displayName = 'FormField';\n\nFormField.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  control: customPropTypes.shorthandAllowingChildren,\n  id: PropTypes.string,\n  inline: PropTypes.bool,\n  label: customPropTypes.itemShorthand,\n  message: customPropTypes.itemShorthand,\n  name: PropTypes.string,\n  required: PropTypes.bool,\n  type: PropTypes.string,\n  errorMessage: customPropTypes.shorthandAllowingChildren,\n};\n\nFormField.handledProps = Object.keys(FormField.propTypes) as any;\n\nFormField.defaultProps = {\n  accessibility: formFieldBehavior,\n  control: { as: Input },\n};\n\nFormField.create = createShorthandFactory({ Component: FormField, mappedProp: 'label' });\n","import { Accessibility } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport { FormField, FormFieldProps } from './FormField';\nimport {\n  useTelemetry,\n  getElementType,\n  useUnhandledProps,\n  useStyles,\n  useFluentContext,\n  useAccessibility,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nexport interface FormProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** The HTML form action. */\n  action?: string;\n\n  /**\n   * @deprecated\n   * Shorthand array of props for the FormFields inside the Form.\n   */\n  fields?: ShorthandCollection<FormFieldProps>;\n\n  /**\n   * The HTML form submit handler.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onSubmit?: ComponentEventHandler<FormProps>;\n}\n\nexport const formClassName = 'ui-form';\n\nexport type FormStylesProps = never;\n\n/**\n * A Form is used to collect, oprionally validate, and submit the user input, in a structured way.\n */\nexport const Form = (React.forwardRef<HTMLFormElement, FormProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Form.displayName, context.telemetry);\n  setStart();\n  const { className, design, styles, variables, action, children, accessibility } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Form.handledProps, props);\n\n  const { classes } = useStyles<FormStylesProps>(Form.displayName, {\n    className: formClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11yProps = useAccessibility<never>(accessibility, {\n    debugName: Form.displayName,\n    rtl: context.rtl,\n  });\n\n  const handleSubmit = (e, ...args) => {\n    const { action } = props;\n\n    // Heads up! Third party libs can pass own data as first argument, we need to check that it has preventDefault()\n    // method.\n    if (!action) _.invoke(e, 'preventDefault');\n    _.invoke(props, 'onSubmit', e, props, ...args);\n  };\n\n  const renderFields = () => {\n    const { fields } = props;\n    return _.map(fields, field => FormField.create(field));\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n      action={action}\n      onSubmit={handleSubmit}\n    >\n      {childrenExist(children) ? children : renderFields()}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'form', HTMLFormElement, FormProps> & FluentComponentStaticProps<FormProps>;\n\nForm.displayName = 'Form';\n\nForm.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  action: PropTypes.string,\n  fields: customPropTypes.collectionShorthand,\n  onSubmit: PropTypes.func,\n};\n\nForm.defaultProps = {\n  as: 'form' as const,\n};\n\nForm.handledProps = Object.keys(Form.propTypes) as any;\n\nForm.create = createShorthandFactory({\n  Component: Form,\n});\n"],"sourceRoot":""}