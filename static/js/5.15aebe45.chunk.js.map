{"version":3,"sources":["../components/Layout/Layout.tsx","../components/ItemLayout/ItemLayout.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../behaviors/Table/gridCellWithFocusableElementBehavior.ts","../behaviors/Table/gridCellMultipleFocusableBehavior.ts","../behaviors/Table/tableCellBehavior.ts","../behaviors/Table/tableHeaderCellBehavior.ts","../behaviors/Table/tableRowBehavior.ts","../behaviors/Table/tableBehavior.ts","../components/Table/TableCell.tsx","../components/Table/TableRow.tsx","../components/Table/Table.tsx","../behaviors/Table/gridCellBehavior.ts","../behaviors/Table/gridHeaderCellBehavior.ts","../behaviors/Table/gridRowBehavior.ts","../behaviors/Table/gridHeaderRowBehavior.ts","../behaviors/Table/gridRowNestedBehavior.ts","../behaviors/Table/gridNestedBehavior.ts"],"names":["layoutClassName","layoutSlotClassNames","start","main","end","gap","reducedStart","reducedMain","reducedEnd","Layout","props","context","useFluentContext","useTelemetry","setStart","setEnd","reducing","disappearing","renderStartArea","renderMainArea","renderEndArea","renderGap","alignItems","debug","justifyItems","mainSize","endSize","startSize","vertical","className","design","styles","variables","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","hasMain","hasEnd","hasStart","mapPropsToInlineStyles","startArea","mainArea","endArea","root","isSingleArea","filter","activeAreas","composedClasses","cx","accessibility","children","content","PropTypes","rootCSS","startCSS","mainCSS","endCSS","forElements","Object","createShorthandFactory","Component","itemLayoutClassName","itemLayoutSlotClassNames","header","headerMedia","contentMedia","media","endMedia","ItemLayout","as","mediaCSS","endMediaCSS","resolvedStyles","mergedMediaClasses","mergedEndMediaClasses","element","pxToRem","style","renderContentArea","renderHeaderArea","headerCSS","headerMediaCSS","contentCSS","contentMediaCSS","headerArea","contentArea","gridTemplateRows","mergedClasses","mediaClasses","mappedProp","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","gridCellWithFocusableElementBehavior","attributes","role","gridCellMultipleFocusableBehavior","focusZone","direction","FocusZoneDirection","bidirectional","keyActions","focusCell","keyCombinations","keyCode","keyboardKey","Escape","tableCellBehavior","tableHeaderCellBehavior","tableRowBehavior","childBehaviors","cell","tableBehavior","row","tableCellClassName","tableCellSlotClassNames","TableCell","cellRef","React","truncateContent","hasChildren","childrenExist","actionHandlers","e","performClick","innerRef","ref","Box","defaultProps","commonPropTypes","customPropTypes","TableRow","rowRef","items","compact","selected","unsetRowTabbable","mapPropsToBehavior","overrideProps","predefinedProps","mergeVariablesOverrides","mappedArrayProp","tableClassName","tableSlotClassNames","Table","rows","onClick","gridCellBehavior","gridHeaderCellBehavior","Enter","SpacebarKey","gridRowBehavior","shouldFocusInnerElementWhenReceivedFocus","shouldResetActiveElementWhenTabFromZone","shiftKey","gridHeaderRowBehavior","shouldEnterInnerZone","event","getCode","horizontal","gridRowNestedBehavior","gridNestedBehavior","focus"],"mappings":"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","file":"static/js/5.15aebe45.chunk.js","sourcesContent":["import { ICSSInJSStyle } from '@fluentui/styles';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { UIComponentProps, commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport {\n  ComponentWithAs,\n  useStyles,\n  getElementType,\n  useFluentContext,\n  useUnhandledProps,\n  useAccessibility,\n  useTelemetry,\n} from '@fluentui/react-bindings';\n\nexport interface LayoutSlotClassNames {\n  start: string;\n  main: string;\n  end: string;\n  gap: string;\n  reducedStart: string;\n  reducedMain: string;\n  reducedEnd: string;\n}\n\nexport interface LayoutProps extends UIComponentProps {\n  debug?: boolean;\n  renderStartArea?: (params: LayoutProps & { classes: Record<string, string> }) => React.ReactNode;\n  renderMainArea?: (params: LayoutProps & { classes: Record<string, string> }) => React.ReactNode;\n  renderEndArea?: (params: LayoutProps & { classes: Record<string, string> }) => React.ReactNode;\n  renderGap?: (params: LayoutProps & { classes: Record<string, string> }) => React.ReactNode;\n  /** Styled applied to the root element of the rendered component. */\n  rootCSS?: ICSSInJSStyle;\n  start?: any;\n  startCSS?: ICSSInJSStyle;\n  startSize?: string;\n  main?: any;\n  mainCSS?: ICSSInJSStyle;\n  mainSize?: string;\n  end?: any;\n  endCSS?: ICSSInJSStyle;\n  endSize?: string;\n  /** How to align items on-axis within the layout (i.e. vertical or not). */\n  justifyItems?: React.CSSProperties['justifyItems'];\n  /** How to align cross-axis items within the layout (i.e. vertical or not). */\n  alignItems?: React.CSSProperties['alignItems'];\n  /** A layout can have gaps of whitespace between areas. */\n  gap?: string;\n  /** A layout can reduce to the minimum required areas. */\n  reducing?: boolean;\n  /** A layout can render its content directly if only one piece of content exists. */\n  disappearing?: boolean;\n  vertical?: boolean;\n}\n\nexport const layoutClassName = 'ui-layout';\nexport const layoutSlotClassNames: LayoutSlotClassNames = {\n  start: `${layoutClassName}__start`,\n  main: `${layoutClassName}__main`,\n  end: `${layoutClassName}__end`,\n  gap: `${layoutClassName}__gap`,\n  reducedStart: `${layoutClassName}--reduced__start`,\n  reducedMain: `${layoutClassName}--reduced__main`,\n  reducedEnd: `${layoutClassName}--reduced__end`,\n};\n\nexport type LayoutStylesProps = Required<\n  Pick<LayoutProps, 'alignItems' | 'debug' | 'gap' | 'justifyItems' | 'mainSize' | 'endSize' | 'startSize' | 'vertical'>\n> & { hasStart: boolean; hasMain: boolean; hasEnd: boolean };\n\n/**\n * (DEPRECATED) A layout is a utility for arranging the content of a component.\n */\nexport const Layout: ComponentWithAs<'div', LayoutProps> & FluentComponentStaticProps<LayoutProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Layout.displayName, context.telemetry);\n  setStart();\n  const {\n    reducing,\n    disappearing,\n    renderStartArea,\n    renderMainArea,\n    renderEndArea,\n    renderGap,\n    alignItems,\n    debug,\n    gap,\n    justifyItems,\n    main,\n    mainSize,\n    end,\n    endSize,\n    start,\n    startSize,\n    vertical,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Layout.handledProps, props);\n\n  const getA11yProps = useAccessibility<never>(props.accessibility, {\n    debugName: Layout.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<LayoutStylesProps>(Layout.displayName, {\n    className: layoutClassName,\n    mapPropsToStyles: () => ({\n      alignItems,\n      debug,\n      gap,\n      justifyItems,\n      hasMain: !!main,\n      mainSize,\n      hasEnd: !!end,\n      endSize,\n      hasStart: !!start,\n      startSize,\n      vertical,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const startArea = renderStartArea({ ...props, classes });\n  const mainArea = renderMainArea({ ...props, classes });\n  const endArea = renderEndArea({ ...props, classes });\n\n  if (!startArea && !mainArea && !endArea) {\n    setEnd();\n    return (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          ...unhandledProps,\n        })}\n      />\n    );\n  }\n\n  const activeAreas = [startArea, mainArea, endArea].filter(Boolean);\n  const isSingleArea = activeAreas.length === 1;\n\n  // disappear: render the content directly without wrapping layout or area elements\n  if (disappearing && isSingleArea) {\n    setEnd();\n    return start || main || end;\n  }\n\n  if (reducing && isSingleArea) {\n    const composedClasses = cx(\n      classes.root,\n      startArea && layoutSlotClassNames.reducedStart,\n      mainArea && layoutSlotClassNames.reducedMain,\n      endArea && layoutSlotClassNames.reducedEnd,\n    );\n    setEnd();\n    return (\n      <ElementType\n        {...getA11yProps('root', {\n          className: composedClasses,\n          ...unhandledProps,\n        })}\n      >\n        {start || main || end}\n      </ElementType>\n    );\n  }\n  setEnd();\n  return (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {startArea}\n      {startArea && mainArea && renderGap({ ...props, classes })}\n      {mainArea}\n      {(startArea || mainArea) && endArea && renderGap({ ...props, classes })}\n      {endArea}\n    </ElementType>\n  );\n};\n\nLayout.displayName = 'Layout';\n\nLayout.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  debug: PropTypes.bool,\n\n  renderStartArea: PropTypes.func,\n  renderMainArea: PropTypes.func,\n  renderEndArea: PropTypes.func,\n  renderGap: PropTypes.func,\n\n  rootCSS: PropTypes.object,\n\n  start: PropTypes.any,\n  startCSS: PropTypes.object,\n  startSize: PropTypes.string,\n\n  main: PropTypes.any,\n  mainCSS: PropTypes.object,\n  mainSize: PropTypes.string,\n\n  end: PropTypes.any,\n  endCSS: PropTypes.object,\n  endSize: PropTypes.string,\n\n  justifyItems: PropTypes.any,\n\n  alignItems: PropTypes.any,\n\n  gap: PropTypes.string,\n  reducing: PropTypes.bool,\n  disappearing: PropTypes.bool,\n\n  vertical: PropTypes.bool,\n};\n\nLayout.defaultProps = {\n  startSize: 'auto',\n  mainSize: '1fr',\n  endSize: 'auto',\n\n  // TODO: when an area is another Layout, do not wrap them in an extra div\n  // TODO: option 1) higher value layouts could use start={Layout.create(start)} to ensure Areas are layout root\n  renderStartArea({ start, classes }) {\n    return (\n      start && (\n        <div\n          className={cx(layoutSlotClassNames.start, classes.start)}\n          {...rtlTextContainer.getAttributes({ forElements: [start] })}\n        >\n          {start}\n        </div>\n      )\n    );\n  },\n\n  renderMainArea({ main, classes }) {\n    return (\n      main && (\n        <div\n          className={cx(layoutSlotClassNames.main, classes.main)}\n          {...rtlTextContainer.getAttributes({ forElements: [main] })}\n        >\n          {main}\n        </div>\n      )\n    );\n  },\n\n  renderEndArea({ end, classes }) {\n    return (\n      end && (\n        <div\n          className={cx(layoutSlotClassNames.end, classes.end)}\n          {...rtlTextContainer.getAttributes({ forElements: [end] })}\n        >\n          {end}\n        </div>\n      )\n    );\n  },\n\n  // Heads up!\n  // IE11 Doesn't support grid-gap, insert virtual columns instead\n  renderGap({ gap, classes }) {\n    return gap && <span className={cx(layoutSlotClassNames.gap, classes.gap)} />;\n  },\n};\n\nLayout.handledProps = Object.keys(Layout.propTypes) as any;\n\nLayout.create = createShorthandFactory({\n  Component: Layout,\n});\n","import {\n  ComponentWithAs,\n  ComponentSlotClasses,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport { ICSSInJSStyle } from '@fluentui/styles';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport {\n  createShorthandFactory,\n  pxToRem,\n  UIComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport { Layout } from '../Layout/Layout';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface ItemLayoutSlotClassNames {\n  header: string;\n  headerMedia: string;\n  main: string;\n  content: string;\n  contentMedia: string;\n  media: string;\n  endMedia: string;\n}\n\nexport interface ItemLayoutProps extends UIComponentProps, ContentComponentProps<any> {\n  contentMedia?: any;\n  /** Toggle debug mode */\n  debug?: boolean;\n  header?: any;\n  endMedia?: any;\n  headerMedia?: any;\n  media?: any;\n  renderContentArea?: (props: ItemLayoutProps, classes: ComponentSlotClasses) => React.ReactNode;\n  renderHeaderArea?: (props: ItemLayoutProps, classes: ComponentSlotClasses) => React.ReactNode;\n  renderMainArea?: (props: ItemLayoutProps, classes: ComponentSlotClasses) => React.ReactNode;\n  /** Styled applied to the root element of the rendered component. */\n  rootCSS?: ICSSInJSStyle;\n  /** Styled applied to the media element of the rendered component. */\n  mediaCSS?: React.CSSProperties;\n  /** Styled applied to the header element of the rendered component. */\n  headerCSS?: ICSSInJSStyle;\n  /** Styled applied to the header media element of the rendered component. */\n  headerMediaCSS?: React.CSSProperties;\n  /** Styled applied to the content element of the rendered component. */\n  contentCSS?: ICSSInJSStyle;\n  /** Styled applied to the content element of the rendered component. */\n  contentMediaCSS?: React.CSSProperties;\n  /** Styled applied to the end media element of the rendered component. */\n  endMediaCSS?: React.CSSProperties;\n}\n\nexport const itemLayoutClassName = 'ui-itemlayout';\nexport const itemLayoutSlotClassNames: ItemLayoutSlotClassNames = {\n  header: `${itemLayoutClassName}__header`,\n  headerMedia: `${itemLayoutClassName}__headerMedia`,\n  main: `${itemLayoutClassName}__main`,\n  content: `${itemLayoutClassName}__content`,\n  contentMedia: `${itemLayoutClassName}__contentMedia`,\n  media: `${itemLayoutClassName}__media`,\n  endMedia: `${itemLayoutClassName}__endMedia`,\n};\n\nexport type ItemLayoutStylesProps = never;\n\n/**\n * (DEPRECATED) The Item Layout handles layout styles for menu items, list items and other similar item templates.\n */\nexport const ItemLayout: ComponentWithAs<'div', ItemLayoutProps> &\n  FluentComponentStaticProps<ItemLayoutProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(ItemLayout.displayName, context.telemetry);\n  setStart();\n  const {\n    as,\n    debug,\n    endMedia,\n    media,\n    renderMainArea,\n    rootCSS,\n    mediaCSS,\n    endMediaCSS,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n\n  const unhandledProps = useUnhandledProps(ItemLayout.handledProps, props);\n\n  const { classes, styles: resolvedStyles } = useStyles<ItemLayoutStylesProps>(ItemLayout.displayName, {\n    className: itemLayoutClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const startArea = media;\n  const mainArea = renderMainArea(props, classes);\n  const endArea = endMedia;\n\n  const mergedMediaClasses = cx(itemLayoutSlotClassNames.media, classes.media);\n  const mergedEndMediaClasses = cx(itemLayoutSlotClassNames.endMedia, classes.endMedia);\n\n  const element = (\n    <Layout\n      as={as as React.ElementType}\n      className={classes.root}\n      styles={resolvedStyles.root}\n      rootCSS={rootCSS}\n      alignItems=\"center\"\n      gap={pxToRem(8)}\n      debug={debug}\n      reducing\n      start={\n        startArea && (\n          <span style={mediaCSS} className={mergedMediaClasses}>\n            {rtlTextContainer.createFor({ element: startArea })}\n          </span>\n        )\n      }\n      main={mainArea}\n      end={\n        endArea && (\n          <span style={endMediaCSS} className={mergedEndMediaClasses}>\n            {rtlTextContainer.createFor({ element: endArea })}\n          </span>\n        )\n      }\n      {...unhandledProps}\n    />\n  );\n  setEnd();\n  return element;\n};\n\nItemLayout.displayName = 'ItemLayout';\n\nItemLayout.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  contentMedia: PropTypes.any,\n  content: PropTypes.any,\n  debug: PropTypes.bool,\n  header: PropTypes.any,\n  endMedia: PropTypes.any,\n  headerMedia: PropTypes.any,\n  media: PropTypes.any,\n  renderContentArea: PropTypes.func,\n  renderHeaderArea: PropTypes.func,\n  renderMainArea: PropTypes.func,\n  rootCSS: PropTypes.object,\n  mediaCSS: PropTypes.object,\n  headerCSS: PropTypes.object,\n  headerMediaCSS: PropTypes.object,\n  contentCSS: PropTypes.object,\n  contentMediaCSS: PropTypes.object,\n  endMediaCSS: PropTypes.object,\n};\n\nItemLayout.defaultProps = {\n  renderMainArea: (props, classes) => {\n    const { renderHeaderArea, renderContentArea } = props;\n\n    const headerArea = renderHeaderArea(props, classes);\n    const contentArea = renderContentArea(props, classes);\n\n    return (\n      <div\n        className={itemLayoutSlotClassNames.main}\n        style={{\n          gridTemplateRows: '1fr 1fr',\n        }}\n      >\n        {headerArea}\n        {contentArea}\n      </div>\n    );\n  },\n\n  renderHeaderArea: (props, classes) => {\n    const { debug, header, headerMedia, headerCSS, headerMediaCSS } = props;\n\n    const mergedClasses = cx(itemLayoutSlotClassNames.header, classes.header);\n    const mediaClasses = cx(itemLayoutSlotClassNames.headerMedia, classes.headerMedia);\n\n    return !header && !headerMedia ? null : (\n      <Layout\n        className={mergedClasses}\n        alignItems=\"end\"\n        gap={pxToRem(8)}\n        debug={debug}\n        main={rtlTextContainer.createFor({ element: header })}\n        rootCSS={headerCSS}\n        end={\n          headerMedia && (\n            <span style={headerMediaCSS} className={mediaClasses}>\n              {rtlTextContainer.createFor({ element: headerMedia })}\n            </span>\n          )\n        }\n      />\n    );\n  },\n\n  renderContentArea: (props, classes) => {\n    const { debug, content, contentMedia, contentCSS, contentMediaCSS } = props;\n\n    const mergedClasses = cx(itemLayoutSlotClassNames.content, classes.content);\n    const mediaClasses = cx(itemLayoutSlotClassNames.contentMedia, classes.contentMedia);\n\n    return !content && !contentMedia ? null : (\n      <Layout\n        className={mergedClasses}\n        alignItems=\"start\"\n        gap={pxToRem(8)}\n        debug={debug}\n        rootCSS={contentCSS}\n        main={rtlTextContainer.createFor({ element: content })}\n        end={\n          contentMedia && (\n            <span style={contentMediaCSS} className={mediaClasses}>\n              {rtlTextContainer.createFor({ element: contentMedia })}\n            </span>\n          )\n        }\n      />\n    );\n  },\n};\n\nItemLayout.handledProps = Object.keys(ItemLayout.propTypes) as any;\n\nItemLayout.create = createShorthandFactory({ Component: ItemLayout, mappedProp: 'content' });\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { Accessibility } from '../../types';\n\n/**\n * @specification\n * Adds role='gridcell'.\n */\nexport const gridCellWithFocusableElementBehavior: Accessibility<GridCellWithFocusableElementBehavior> = () => ({\n  attributes: {\n    root: {\n      role: 'gridcell',\n    },\n  },\n});\n\ntype GridCellWithFocusableElementBehavior = never;\n","import { Accessibility } from '../../types';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport { keyboardKey } from '../../keyboard-key';\n\n/**\n * @specification\n * Adds role='gridcell'.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n * Provides arrow key navigation in bidirectional direction.\n * Triggers 'focusCell' action with 'Escape' on 'root'.\n */\nexport const gridCellMultipleFocusableBehavior: Accessibility<GridCellMultipleFocusableBehavior> = () => ({\n  attributes: {\n    root: {\n      role: 'gridcell',\n      [IS_FOCUSABLE_ATTRIBUTE]: true,\n    },\n  },\n  focusZone: {\n    props: {\n      direction: FocusZoneDirection.bidirectional,\n    },\n  },\n  keyActions: {\n    root: {\n      focusCell: {\n        keyCombinations: [{ keyCode: keyboardKey.Escape }],\n      },\n    },\n  },\n});\n\ntype GridCellMultipleFocusableBehavior = never;\n","import { Accessibility } from '../../types';\n/**\n * @description\n * Behavior for a table cell - a cell in a tabular container. See https://www.w3.org/TR/wai-aria-1.1/#cell\n * @specification\n * Adds role='cell'.\n */\nexport const tableCellBehavior: Accessibility<TableCellBehaviorProps> = () => ({\n  attributes: {\n    root: {\n      role: 'cell',\n    },\n  },\n});\n\nexport type TableCellBehaviorProps = never;\n","import { Accessibility } from '../../types';\nimport { TableCellBehaviorProps } from './tableCellBehavior';\n/**\n * @description\n * Behavior for a table header cell - a cell containing header information for a column.\n * See https://www.w3.org/TR/wai-aria-1.1/#columnheader\n * @specification\n * Adds role='columnheader'.\n */\nexport const tableHeaderCellBehavior: Accessibility<TableCellBehaviorProps> = () => ({\n  attributes: {\n    root: {\n      role: 'columnheader',\n    },\n  },\n});\n","import { Accessibility } from '../../types';\nimport { tableCellBehavior } from './tableCellBehavior';\nimport { tableHeaderCellBehavior } from './tableHeaderCellBehavior';\nimport { GridRowBehaviorProps } from './gridRowBehavior';\n\n/**\n * @description\n * Behavior for a table row - a cell in a tabular container. See https://www.w3.org/TR/wai-aria-1.1/#row\n * @specification\n * Adds role='row'.\n */\nexport const tableRowBehavior: Accessibility<GridRowBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      role: 'row',\n    },\n  },\n  childBehaviors: {\n    cell: props.header ? tableHeaderCellBehavior : tableCellBehavior,\n  },\n});\n","import { Accessibility } from '../../types';\nimport { tableRowBehavior } from './tableRowBehavior';\n\n/**\n * @description\n * Basic behavior for static table - a static tabular structure containing one or more rows that each contain one or more cells; it is not an interactive widget\n * @specification\n * Adds role='table'.\n * Applies 'tableRowBehavior' for 'row' child component.\n */\nexport const tableBehavior: Accessibility<TableBehaviorProps> = () => ({\n  attributes: {\n    root: {\n      role: 'table',\n    },\n  },\n  childBehaviors: {\n    row: tableRowBehavior,\n  },\n});\n\nexport type TableBehaviorProps = never;\n","import * as customPropTypes from '@fluentui/react-proptypes';\nimport { Accessibility, tableCellBehavior, TableCellBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  childrenExist,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n} from '../../utils';\nimport {\n  useTelemetry,\n  useStyles,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\n\nimport { Box, BoxProps } from '../Box/Box';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\n\nexport interface TableCellProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available TableCellBehavior\n   * */\n  accessibility?: Accessibility<TableCellBehaviorProps>;\n\n  /**\n   * Truncate cell's content\n   */\n  truncateContent?: boolean;\n}\n\nexport type TableCellStylesProps = Pick<TableCellProps, 'truncateContent'>;\n\nexport interface TableCellSlotClassNames {\n  content: string;\n}\n\nexport const tableCellClassName = 'ui-table__cell';\nexport const tableCellSlotClassNames: TableCellSlotClassNames = {\n  content: `${tableCellClassName}__content`,\n};\n\n/**\n * Component represents a table cell.\n */\nexport const TableCell = (React.forwardRef<HTMLDivElement, TableCellProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TableCell.displayName, context.telemetry);\n  setStart();\n  const cellRef = React.useRef<HTMLElement>();\n\n  const { children, content, truncateContent, className, design, styles, variables } = props;\n  const hasChildren = childrenExist(children);\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TableCell.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: TableCell.displayName,\n    actionHandlers: {\n      focusCell: e => {\n        e.preventDefault();\n        cellRef.current.focus();\n      },\n      performClick: e => {\n        if (e.currentTarget === e.target) {\n          _.invoke(props, 'onClick', e, props);\n          e.preventDefault();\n        }\n      },\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<TableCellStylesProps>(TableCell.displayName, {\n    className: tableCellClassName,\n    mapPropsToStyles: () => ({\n      truncateContent,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <Ref innerRef={cellRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            ref,\n            ...unhandledProps,\n          })}\n        >\n          {hasChildren\n            ? children\n            : Box.create(content, {\n                defaultProps: () => ({ className: tableCellSlotClassNames.content, styles: resolvedStyles.content }),\n              })}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, TableCellProps> & FluentComponentStaticProps<TableCellProps>;\n\nTableCell.displayName = 'TableCell';\n\nTableCell.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  content: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n  ]),\n  truncateContent: PropTypes.bool,\n};\n\nTableCell.handledProps = Object.keys(TableCell.propTypes) as any;\n\nTableCell.defaultProps = {\n  accessibility: tableCellBehavior,\n};\n\nTableCell.create = createShorthandFactory({ Component: TableCell, mappedProp: 'content' });\n","import { Accessibility, tableRowBehavior, GridRowBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  mergeVariablesOverrides,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n  useFluentContext,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\n\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { FluentComponentStaticProps, ShorthandCollection } from '../../types';\nimport { childrenExist, commonPropTypes, createShorthandFactory, UIComponentProps } from '../../utils';\nimport { TableCell, TableCellProps } from './TableCell';\n\nexport interface TableRowProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * */\n  accessibility?: Accessibility<GridRowBehaviorProps>;\n\n  /**\n   * Row cells\n   */\n  items?: ShorthandCollection<TableCellProps>;\n\n  /**\n   * Is the row a table header\n   */\n  header?: boolean;\n\n  /**\n   * Render table in compact mode\n   */\n  compact?: boolean;\n\n  /**\n   * Whether a row is currently selected or not.\n   */\n  selected?: boolean;\n}\n\nexport const tableRowClassName = 'ui-table__row';\n\nexport type TableRowStylesProps = Pick<TableRowProps, 'header' | 'compact'>;\n\n/**\n * Component represents a single row in a tabular structure\n */\nexport const TableRow = (React.forwardRef<HTMLDivElement, TableRowProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TableRow.displayName, context.telemetry);\n  setStart();\n  const rowRef = React.useRef<HTMLElement>();\n  const { className, design, styles, items, header, compact, children, accessibility, variables, selected } = props;\n\n  const hasChildren = childrenExist(children);\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TableRow.handledProps, props);\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: TableRow.displayName,\n    actionHandlers: {\n      // https://github.com/microsoft/fluent-ui-react/issues/2150\n      unsetRowTabbable: e => {\n        rowRef.current.setAttribute('tabindex', '-1');\n      },\n      performClick: e => {\n        if (e.currentTarget === e.target) {\n          _.invoke(props, 'onClick', e, props);\n          e.preventDefault();\n        }\n      },\n    },\n    mapPropsToBehavior: () => ({\n      selected,\n      header,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TableRowStylesProps>(TableRow.displayName, {\n    className: tableRowClassName,\n    mapPropsToStyles: () => ({\n      header,\n      compact,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderCells = () => {\n    return _.map(items, (item: TableCellProps) => {\n      return TableCell.create(item, {\n        defaultProps: () => getA11yProps('cell', {}),\n        overrideProps: predefinedProps => ({\n          variables: mergeVariablesOverrides(variables, predefinedProps.variables),\n        }),\n      });\n    });\n  };\n\n  const element = (\n    <Ref innerRef={rowRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            ref,\n            ...unhandledProps,\n          })}\n        >\n          {hasChildren && children}\n          {!hasChildren && renderCells()}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, TableRowProps> & FluentComponentStaticProps<TableRowProps>;\n\nTableRow.displayName = 'TableRow';\n\nTableRow.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  items: customPropTypes.collectionShorthand,\n  header: PropTypes.bool,\n  compact: PropTypes.bool,\n  selected: PropTypes.bool,\n};\n\nTableRow.handledProps = Object.keys(TableRow.propTypes) as any;\n\nTableRow.defaultProps = {\n  accessibility: tableRowBehavior,\n};\n\nTableRow.create = createShorthandFactory({ Component: TableRow, mappedArrayProp: 'items' });\n","import { Accessibility, tableBehavior, TableBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useTelemetry,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  ForwardRefWithAs,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport {\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  childrenExist,\n  createShorthandFactory,\n} from '../../utils';\nimport { TableRow, TableRowProps } from './TableRow';\nimport { TableCell } from './TableCell';\n\nimport { ShorthandCollection, ShorthandValue, FluentComponentStaticProps } from '../../types';\n\nexport interface TableSlotClassNames {\n  header: string;\n}\n\nexport interface TableProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * */\n  accessibility?: Accessibility<TableBehaviorProps>;\n\n  /** The columns of the Table with a space-separated list of values.\n   */\n  header?: ShorthandValue<TableRowProps>;\n\n  /** The rows of the Table with a space-separated list of values.\n   */\n  rows?: ShorthandCollection<TableRowProps>;\n\n  /**\n   * Render table in compact mode\n   */\n  compact?: boolean;\n}\n\nexport const tableClassName = 'ui-table';\nexport const tableSlotClassNames: TableSlotClassNames = {\n  header: `${tableClassName}__header`,\n};\n\nexport type TableStylesProps = never;\n\n/**\n * A Table is used to display data in tabular layout\n * * @accessibility\n * Implements ARIA [Data Grid](https://www.w3.org/TR/wai-aria-practices/#dataGrid) design pattern for presenting tabular information.\n * When gridcell contains actionable element, use [gridCellWithFocusableElementBehavior](/components/table/accessibility#grid-cell-with-focusable-element-behavior-ts). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * Use [gridCellMultipleFocusableBehavior](/components/table/accessibility#gridCellMultipleFocusableBehavior), when gridcell contains:\n * \\- editable content\n * \\- multiple actionable elements\n * \\- component that utilizes arrow keys in its navigation, like menu button, dropdown, radio group, slider, etc.\n * [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_inside)\n * @accessibilityIssues\n * [NVDA narrate table title(aria-label) twice](https://github.com/nvaccess/nvda/issues/10548)\n * [Accessibility DOM > Table > gridcell > when gridcell is focused, then selected state is send to reader](https://bugs.chromium.org/p/chromium/issues/detail?id=1030378)\n * [JAWS narrate grid name twice, once as table and second time as grid](https://github.com/FreedomScientific/VFO-standards-support/issues/346)\n * [JAWS doesn't narrate grid column name, when focus is on actionable element in the cell] (https://github.com/FreedomScientific/VFO-standards-support/issues/348)\n * [aria-sort is not output at child elements](https://github.com/FreedomScientific/VFO-standards-support/issues/319)\n * [VoiceOver not announcing rows correctly for a grid with presentation elements inside](https://bugs.chromium.org/p/chromium/issues/detail?id=1054424)\n * VoiceOver doesn't narrate aria-rowcount value in table or grid\n */\nexport const Table = (React.forwardRef<HTMLDivElement, TableProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Table.displayName, context.telemetry);\n  setStart();\n  const { children, rows, header, compact, accessibility, className, design, styles, variables } = props;\n  const hasChildren = childrenExist(children);\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Table.handledProps, props);\n\n  const getA11yProps = useAccessibility<TableBehaviorProps>(accessibility, {\n    debugName: Table.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TableStylesProps>(Table.displayName, {\n    className: tableClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderRows = () => {\n    return _.map(rows, (row: TableRowProps) => {\n      return TableRow.create(row, {\n        defaultProps: () =>\n          getA11yProps('row', {\n            compact,\n            onClick: (e, props) => {\n              _.invoke(row, 'onClick', e, props);\n            },\n          }),\n        overrideProps: predefinedProps => ({\n          variables: mergeVariablesOverrides(variables, predefinedProps.variables),\n        }),\n      });\n    });\n  };\n\n  const renderHeader = () => {\n    return TableRow.create(header, {\n      defaultProps: () =>\n        getA11yProps('row', {\n          header: true,\n          compact,\n          className: tableSlotClassNames.header,\n        }),\n      overrideProps: predefinedProps => ({\n        variables: mergeVariablesOverrides(variables, predefinedProps.variables),\n      }),\n    });\n  };\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ref,\n        ...unhandledProps,\n      })}\n    >\n      {hasChildren && children}\n      {/* <thead> */}\n      {!hasChildren && renderHeader()}\n      {/* </thead> */}\n      {/* <tbody> */}\n      {!hasChildren && renderRows()}\n      {/* </tbody> */}\n    </ElementType>,\n  );\n  setEnd();\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, TableProps> &\n  FluentComponentStaticProps<TableProps> & {\n    Cell: typeof TableCell;\n    Row: typeof TableRow;\n  };\n\nTable.displayName = 'Table';\n\nTable.Cell = TableCell;\n\nTable.Row = TableRow;\n\nTable.create = createShorthandFactory({\n  Component: Table,\n});\n\nTable.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  header: customPropTypes.itemShorthand,\n  rows: customPropTypes.collectionShorthand,\n  compact: PropTypes.bool,\n};\n\nTable.handledProps = Object.keys(Table.propTypes) as any;\n\nTable.defaultProps = {\n  accessibility: tableBehavior,\n};\n","import { Accessibility } from '../../types';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\n\n/**\n * @description\n * @specification\n * Adds role='gridcell'.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n */\nexport const gridCellBehavior: Accessibility<GridCellBehaviorProps> = () => ({\n  attributes: {\n    root: {\n      role: 'gridcell',\n      [IS_FOCUSABLE_ATTRIBUTE]: true,\n    },\n  },\n});\n\ntype GridCellBehaviorProps = never;\n","import { Accessibility } from '../../types';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { keyboardKey, SpacebarKey } from '../../keyboard-key';\n\n/**\n * @specification\n * Adds role='columnheader'.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n */\nexport const gridHeaderCellBehavior: Accessibility<GridHeaderCellBehaviorProps> = () => ({\n  attributes: {\n    root: {\n      role: 'columnheader',\n      [IS_FOCUSABLE_ATTRIBUTE]: true,\n    },\n  },\n  keyActions: {\n    root: {\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n      },\n    },\n  },\n});\n\ntype GridHeaderCellBehaviorProps = never;\n","import { Accessibility } from '../../types';\nimport { gridRowNestedBehavior } from './gridRowNestedBehavior';\nimport { gridHeaderRowBehavior } from './gridHeaderRowBehavior';\n\n/**\n * @description\n * Defines a behavior \"gridHeaderRowBehavior\" or \"gridRowNestedBehavior\" based on \"header\" property.\n */\n\nexport const gridRowBehavior: Accessibility<GridRowBehaviorProps> = props =>\n  props.header ? gridHeaderRowBehavior(props) : gridRowNestedBehavior(props);\n\nexport type GridRowBehaviorProps = {\n  /** Indicates if a table row is header. */\n  header?: boolean;\n  /** Indicated is table row is selected.  */\n  selected?: boolean;\n};\n","import { Accessibility } from '../../types';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport { keyboardKey } from '../../keyboard-key';\nimport { gridHeaderCellBehavior } from './gridHeaderCellBehavior';\nimport { GridRowBehaviorProps } from './gridRowBehavior';\n\n/**\n * @specification\n * Adds role='row'.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n * Provides arrow key navigation in horizontal direction.\n * Focused active element of the component is reset when TAB from the component.\n * When component's container element receives focus, focus will be set to the default focusable child element of the component.\n * Triggers 'unsetRowTabbable' action using 'shiftKey' + 'Tab' key on 'root'.\n * Applies 'gridHeaderCellBehavior' for 'cell' child component.\n */\nexport const gridHeaderRowBehavior: Accessibility<GridRowBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      [IS_FOCUSABLE_ATTRIBUTE]: true,\n      role: 'row',\n    },\n  },\n  focusZone: {\n    props: {\n      direction: FocusZoneDirection.horizontal,\n      shouldFocusInnerElementWhenReceivedFocus: true,\n      shouldResetActiveElementWhenTabFromZone: true,\n    },\n  },\n  keyActions: {\n    root: {\n      unsetRowTabbable: {\n        keyCombinations: [{ keyCode: keyboardKey.Tab, shiftKey: true }],\n      },\n    },\n  },\n  childBehaviors: {\n    cell: gridHeaderCellBehavior,\n  },\n});\n","import { Accessibility } from '../../types';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport { getCode, keyboardKey, SpacebarKey } from '../../keyboard-key';\nimport { gridCellBehavior } from './gridCellBehavior';\nimport { GridRowBehaviorProps } from './gridRowBehavior';\n\n/**\n * @specification\n * Adds role='row'.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n * Adds attribute 'aria-selected=true' based on the property 'selected'. Based on this screen readers will recognize the selected state of the item.\n * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.\n * Provides arrow key navigation in horizontal direction.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'unsetRowTabbable' action using 'shiftKey' + 'Tab' key on 'root'.\n * Applies 'gridCellBehavior' for 'cell' child component.\n */\nexport const gridRowNestedBehavior: Accessibility<GridRowBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      [IS_FOCUSABLE_ATTRIBUTE]: true,\n      role: 'row',\n      'aria-selected': props.selected,\n    },\n  },\n  focusZone: {\n    props: {\n      shouldEnterInnerZone: event => getCode(event) === keyboardKey.Enter,\n      direction: FocusZoneDirection.horizontal,\n    },\n  },\n  keyActions: {\n    root: {\n      unsetRowTabbable: {\n        keyCombinations: [{ keyCode: keyboardKey.Tab, shiftKey: true }],\n      },\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n      },\n    },\n  },\n  childBehaviors: {\n    cell: gridCellBehavior,\n  },\n});\n","import { Accessibility } from '../../types';\nimport { getCode, keyboardKey } from '../../keyboard-key';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport { gridRowBehavior } from './gridRowBehavior';\n\n/**\n * @specification\n * Adds role='grid'.\n * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.\n * Provides arrow key navigation in vertical direction.\n * Focused active element of the component is reset when TAB from the component.\n * Triggers 'focus' action with 'Escape' on 'root'.\n * Applies 'gridRowBehavior' for 'row' child component.\n */\nexport const gridNestedBehavior: Accessibility<GridNestedBehaviorProps> = () => ({\n  attributes: {\n    root: {\n      role: 'grid',\n    },\n  },\n  focusZone: {\n    props: {\n      shouldEnterInnerZone: event => getCode(event) === keyboardKey.ArrowRight,\n      direction: FocusZoneDirection.vertical,\n      shouldResetActiveElementWhenTabFromZone: true,\n    },\n  },\n  keyActions: {\n    root: {\n      focus: {\n        keyCombinations: [{ keyCode: keyboardKey.Escape }],\n      },\n    },\n  },\n  childBehaviors: {\n    row: gridRowBehavior,\n  },\n});\n\ntype GridNestedBehaviorProps = never;\n"],"sourceRoot":""}